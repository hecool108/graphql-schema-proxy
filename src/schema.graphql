schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [Int!]

  """does the array contain the given value"""
  _contains: [Int!]
  _eq: [Int!]
  _gt: [Int!]
  _gte: [Int!]
  _in: [[Int!]!]
  _is_null: Boolean
  _lt: [Int!]
  _lte: [Int!]
  _neq: [Int!]
  _nin: [[Int!]!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar bpchar

"""
Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'.
"""
input bpchar_comparison_exp {
  _eq: bpchar
  _gt: bpchar
  _gte: bpchar

  """does the column match the given case-insensitive pattern"""
  _ilike: bpchar
  _in: [bpchar!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: bpchar
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: bpchar
  _lt: bpchar
  _lte: bpchar
  _neq: bpchar

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: bpchar
  _nin: [bpchar!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: bpchar

  """does the column NOT match the given pattern"""
  _nlike: bpchar

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: bpchar

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: bpchar

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: bpchar

  """does the column match the given SQL regular expression"""
  _similar: bpchar
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar money

"""
Boolean expression to compare columns of type "money". All fields are combined with logical 'AND'.
"""
input money_comparison_exp {
  _eq: money
  _gt: money
  _gte: money
  _in: [money!]
  _is_null: Boolean
  _lt: money
  _lte: money
  _neq: money
  _nin: [money!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "nanisore.Image"
  """
  delete_nanisore_Image(
    """filter the rows which have to be deleted"""
    where: nanisore_Image_bool_exp!
  ): nanisore_Image_mutation_response

  """
  delete single row from the table: "nanisore.Image"
  """
  delete_nanisore_Image_by_pk(id: Int!): nanisore_Image

  """
  delete data from the table: "nanisore.Platform"
  """
  delete_nanisore_Platform(
    """filter the rows which have to be deleted"""
    where: nanisore_Platform_bool_exp!
  ): nanisore_Platform_mutation_response

  """
  delete single row from the table: "nanisore.Platform"
  """
  delete_nanisore_Platform_by_pk(id: Int!): nanisore_Platform

  """
  delete data from the table: "nanisore.Product"
  """
  delete_nanisore_Product(
    """filter the rows which have to be deleted"""
    where: nanisore_Product_bool_exp!
  ): nanisore_Product_mutation_response

  """
  delete data from the table: "nanisore.Product_Specification"
  """
  delete_nanisore_Product_Specification(
    """filter the rows which have to be deleted"""
    where: nanisore_Product_Specification_bool_exp!
  ): nanisore_Product_Specification_mutation_response

  """
  delete single row from the table: "nanisore.Product_Specification"
  """
  delete_nanisore_Product_Specification_by_pk(id: Int!): nanisore_Product_Specification

  """
  delete single row from the table: "nanisore.Product"
  """
  delete_nanisore_Product_by_pk(id: Int!): nanisore_Product

  """
  delete data from the table: "nanisore.Specification"
  """
  delete_nanisore_Specification(
    """filter the rows which have to be deleted"""
    where: nanisore_Specification_bool_exp!
  ): nanisore_Specification_mutation_response

  """
  delete single row from the table: "nanisore.Specification"
  """
  delete_nanisore_Specification_by_pk(id: Int!): nanisore_Specification

  """
  delete data from the table: "scraper.item"
  """
  delete_scraper_item(
    """filter the rows which have to be deleted"""
    where: scraper_item_bool_exp!
  ): scraper_item_mutation_response

  """
  delete single row from the table: "scraper.item"
  """
  delete_scraper_item_by_pk(id: Int!): scraper_item

  """
  delete data from the table: "scraper.run"
  """
  delete_scraper_run(
    """filter the rows which have to be deleted"""
    where: scraper_run_bool_exp!
  ): scraper_run_mutation_response

  """
  delete single row from the table: "scraper.run"
  """
  delete_scraper_run_by_pk(id: Int!): scraper_run

  """
  delete data from the table: "tigertech.image"
  """
  delete_tigertech_image(
    """filter the rows which have to be deleted"""
    where: tigertech_image_bool_exp!
  ): tigertech_image_mutation_response

  """
  delete single row from the table: "tigertech.image"
  """
  delete_tigertech_image_by_pk(id: bigint!): tigertech_image

  """
  delete data from the table: "tigertech.product"
  """
  delete_tigertech_product(
    """filter the rows which have to be deleted"""
    where: tigertech_product_bool_exp!
  ): tigertech_product_mutation_response

  """
  delete single row from the table: "tigertech.product"
  """
  delete_tigertech_product_by_pk(id: bigint!): tigertech_product

  """
  delete data from the table: "tigertech.product_sku"
  """
  delete_tigertech_product_sku(
    """filter the rows which have to be deleted"""
    where: tigertech_product_sku_bool_exp!
  ): tigertech_product_sku_mutation_response

  """
  delete single row from the table: "tigertech.product_sku"
  """
  delete_tigertech_product_sku_by_pk(id: bigint!): tigertech_product_sku

  """
  delete data from the table: "tigertech.specification"
  """
  delete_tigertech_specification(
    """filter the rows which have to be deleted"""
    where: tigertech_specification_bool_exp!
  ): tigertech_specification_mutation_response

  """
  delete single row from the table: "tigertech.specification"
  """
  delete_tigertech_specification_by_pk(id: bigint!): tigertech_specification

  """
  insert data into the table: "nanisore.Image"
  """
  insert_nanisore_Image(
    """the rows to be inserted"""
    objects: [nanisore_Image_insert_input!]!

    """upsert condition"""
    on_conflict: nanisore_Image_on_conflict
  ): nanisore_Image_mutation_response

  """
  insert a single row into the table: "nanisore.Image"
  """
  insert_nanisore_Image_one(
    """the row to be inserted"""
    object: nanisore_Image_insert_input!

    """upsert condition"""
    on_conflict: nanisore_Image_on_conflict
  ): nanisore_Image

  """
  insert data into the table: "nanisore.Platform"
  """
  insert_nanisore_Platform(
    """the rows to be inserted"""
    objects: [nanisore_Platform_insert_input!]!

    """upsert condition"""
    on_conflict: nanisore_Platform_on_conflict
  ): nanisore_Platform_mutation_response

  """
  insert a single row into the table: "nanisore.Platform"
  """
  insert_nanisore_Platform_one(
    """the row to be inserted"""
    object: nanisore_Platform_insert_input!

    """upsert condition"""
    on_conflict: nanisore_Platform_on_conflict
  ): nanisore_Platform

  """
  insert data into the table: "nanisore.Product"
  """
  insert_nanisore_Product(
    """the rows to be inserted"""
    objects: [nanisore_Product_insert_input!]!

    """upsert condition"""
    on_conflict: nanisore_Product_on_conflict
  ): nanisore_Product_mutation_response

  """
  insert data into the table: "nanisore.Product_Specification"
  """
  insert_nanisore_Product_Specification(
    """the rows to be inserted"""
    objects: [nanisore_Product_Specification_insert_input!]!

    """upsert condition"""
    on_conflict: nanisore_Product_Specification_on_conflict
  ): nanisore_Product_Specification_mutation_response

  """
  insert a single row into the table: "nanisore.Product_Specification"
  """
  insert_nanisore_Product_Specification_one(
    """the row to be inserted"""
    object: nanisore_Product_Specification_insert_input!

    """upsert condition"""
    on_conflict: nanisore_Product_Specification_on_conflict
  ): nanisore_Product_Specification

  """
  insert a single row into the table: "nanisore.Product"
  """
  insert_nanisore_Product_one(
    """the row to be inserted"""
    object: nanisore_Product_insert_input!

    """upsert condition"""
    on_conflict: nanisore_Product_on_conflict
  ): nanisore_Product

  """
  insert data into the table: "nanisore.Specification"
  """
  insert_nanisore_Specification(
    """the rows to be inserted"""
    objects: [nanisore_Specification_insert_input!]!

    """upsert condition"""
    on_conflict: nanisore_Specification_on_conflict
  ): nanisore_Specification_mutation_response

  """
  insert a single row into the table: "nanisore.Specification"
  """
  insert_nanisore_Specification_one(
    """the row to be inserted"""
    object: nanisore_Specification_insert_input!

    """upsert condition"""
    on_conflict: nanisore_Specification_on_conflict
  ): nanisore_Specification

  """
  insert data into the table: "scraper.item"
  """
  insert_scraper_item(
    """the rows to be inserted"""
    objects: [scraper_item_insert_input!]!

    """upsert condition"""
    on_conflict: scraper_item_on_conflict
  ): scraper_item_mutation_response

  """
  insert a single row into the table: "scraper.item"
  """
  insert_scraper_item_one(
    """the row to be inserted"""
    object: scraper_item_insert_input!

    """upsert condition"""
    on_conflict: scraper_item_on_conflict
  ): scraper_item

  """
  insert data into the table: "scraper.run"
  """
  insert_scraper_run(
    """the rows to be inserted"""
    objects: [scraper_run_insert_input!]!

    """upsert condition"""
    on_conflict: scraper_run_on_conflict
  ): scraper_run_mutation_response

  """
  insert a single row into the table: "scraper.run"
  """
  insert_scraper_run_one(
    """the row to be inserted"""
    object: scraper_run_insert_input!

    """upsert condition"""
    on_conflict: scraper_run_on_conflict
  ): scraper_run

  """
  insert data into the table: "tigertech.image"
  """
  insert_tigertech_image(
    """the rows to be inserted"""
    objects: [tigertech_image_insert_input!]!

    """upsert condition"""
    on_conflict: tigertech_image_on_conflict
  ): tigertech_image_mutation_response

  """
  insert a single row into the table: "tigertech.image"
  """
  insert_tigertech_image_one(
    """the row to be inserted"""
    object: tigertech_image_insert_input!

    """upsert condition"""
    on_conflict: tigertech_image_on_conflict
  ): tigertech_image

  """
  insert data into the table: "tigertech.product"
  """
  insert_tigertech_product(
    """the rows to be inserted"""
    objects: [tigertech_product_insert_input!]!

    """upsert condition"""
    on_conflict: tigertech_product_on_conflict
  ): tigertech_product_mutation_response

  """
  insert a single row into the table: "tigertech.product"
  """
  insert_tigertech_product_one(
    """the row to be inserted"""
    object: tigertech_product_insert_input!

    """upsert condition"""
    on_conflict: tigertech_product_on_conflict
  ): tigertech_product

  """
  insert data into the table: "tigertech.product_sku"
  """
  insert_tigertech_product_sku(
    """the rows to be inserted"""
    objects: [tigertech_product_sku_insert_input!]!

    """upsert condition"""
    on_conflict: tigertech_product_sku_on_conflict
  ): tigertech_product_sku_mutation_response

  """
  insert a single row into the table: "tigertech.product_sku"
  """
  insert_tigertech_product_sku_one(
    """the row to be inserted"""
    object: tigertech_product_sku_insert_input!

    """upsert condition"""
    on_conflict: tigertech_product_sku_on_conflict
  ): tigertech_product_sku

  """
  insert data into the table: "tigertech.specification"
  """
  insert_tigertech_specification(
    """the rows to be inserted"""
    objects: [tigertech_specification_insert_input!]!

    """upsert condition"""
    on_conflict: tigertech_specification_on_conflict
  ): tigertech_specification_mutation_response

  """
  insert a single row into the table: "tigertech.specification"
  """
  insert_tigertech_specification_one(
    """the row to be inserted"""
    object: tigertech_specification_insert_input!

    """upsert condition"""
    on_conflict: tigertech_specification_on_conflict
  ): tigertech_specification

  """
  update data of the table: "nanisore.Image"
  """
  update_nanisore_Image(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Image_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Image_set_input

    """filter the rows which have to be updated"""
    where: nanisore_Image_bool_exp!
  ): nanisore_Image_mutation_response

  """
  update single row of the table: "nanisore.Image"
  """
  update_nanisore_Image_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Image_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Image_set_input
    pk_columns: nanisore_Image_pk_columns_input!
  ): nanisore_Image

  """
  update multiples rows of table: "nanisore.Image"
  """
  update_nanisore_Image_many(
    """updates to execute, in order"""
    updates: [nanisore_Image_updates!]!
  ): [nanisore_Image_mutation_response]

  """
  update data of the table: "nanisore.Platform"
  """
  update_nanisore_Platform(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Platform_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Platform_set_input

    """filter the rows which have to be updated"""
    where: nanisore_Platform_bool_exp!
  ): nanisore_Platform_mutation_response

  """
  update single row of the table: "nanisore.Platform"
  """
  update_nanisore_Platform_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Platform_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Platform_set_input
    pk_columns: nanisore_Platform_pk_columns_input!
  ): nanisore_Platform

  """
  update multiples rows of table: "nanisore.Platform"
  """
  update_nanisore_Platform_many(
    """updates to execute, in order"""
    updates: [nanisore_Platform_updates!]!
  ): [nanisore_Platform_mutation_response]

  """
  update data of the table: "nanisore.Product"
  """
  update_nanisore_Product(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Product_set_input

    """filter the rows which have to be updated"""
    where: nanisore_Product_bool_exp!
  ): nanisore_Product_mutation_response

  """
  update data of the table: "nanisore.Product_Specification"
  """
  update_nanisore_Product_Specification(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Product_Specification_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Product_Specification_set_input

    """filter the rows which have to be updated"""
    where: nanisore_Product_Specification_bool_exp!
  ): nanisore_Product_Specification_mutation_response

  """
  update single row of the table: "nanisore.Product_Specification"
  """
  update_nanisore_Product_Specification_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Product_Specification_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Product_Specification_set_input
    pk_columns: nanisore_Product_Specification_pk_columns_input!
  ): nanisore_Product_Specification

  """
  update multiples rows of table: "nanisore.Product_Specification"
  """
  update_nanisore_Product_Specification_many(
    """updates to execute, in order"""
    updates: [nanisore_Product_Specification_updates!]!
  ): [nanisore_Product_Specification_mutation_response]

  """
  update single row of the table: "nanisore.Product"
  """
  update_nanisore_Product_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Product_set_input
    pk_columns: nanisore_Product_pk_columns_input!
  ): nanisore_Product

  """
  update multiples rows of table: "nanisore.Product"
  """
  update_nanisore_Product_many(
    """updates to execute, in order"""
    updates: [nanisore_Product_updates!]!
  ): [nanisore_Product_mutation_response]

  """
  update data of the table: "nanisore.Specification"
  """
  update_nanisore_Specification(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Specification_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Specification_set_input

    """filter the rows which have to be updated"""
    where: nanisore_Specification_bool_exp!
  ): nanisore_Specification_mutation_response

  """
  update single row of the table: "nanisore.Specification"
  """
  update_nanisore_Specification_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: nanisore_Specification_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: nanisore_Specification_set_input
    pk_columns: nanisore_Specification_pk_columns_input!
  ): nanisore_Specification

  """
  update multiples rows of table: "nanisore.Specification"
  """
  update_nanisore_Specification_many(
    """updates to execute, in order"""
    updates: [nanisore_Specification_updates!]!
  ): [nanisore_Specification_mutation_response]

  """
  update data of the table: "scraper.item"
  """
  update_scraper_item(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scraper_item_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scraper_item_set_input

    """filter the rows which have to be updated"""
    where: scraper_item_bool_exp!
  ): scraper_item_mutation_response

  """
  update single row of the table: "scraper.item"
  """
  update_scraper_item_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scraper_item_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scraper_item_set_input
    pk_columns: scraper_item_pk_columns_input!
  ): scraper_item

  """
  update multiples rows of table: "scraper.item"
  """
  update_scraper_item_many(
    """updates to execute, in order"""
    updates: [scraper_item_updates!]!
  ): [scraper_item_mutation_response]

  """
  update data of the table: "scraper.run"
  """
  update_scraper_run(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scraper_run_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scraper_run_set_input

    """filter the rows which have to be updated"""
    where: scraper_run_bool_exp!
  ): scraper_run_mutation_response

  """
  update single row of the table: "scraper.run"
  """
  update_scraper_run_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: scraper_run_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scraper_run_set_input
    pk_columns: scraper_run_pk_columns_input!
  ): scraper_run

  """
  update multiples rows of table: "scraper.run"
  """
  update_scraper_run_many(
    """updates to execute, in order"""
    updates: [scraper_run_updates!]!
  ): [scraper_run_mutation_response]

  """
  update data of the table: "tigertech.image"
  """
  update_tigertech_image(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_image_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_image_set_input

    """filter the rows which have to be updated"""
    where: tigertech_image_bool_exp!
  ): tigertech_image_mutation_response

  """
  update single row of the table: "tigertech.image"
  """
  update_tigertech_image_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_image_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_image_set_input
    pk_columns: tigertech_image_pk_columns_input!
  ): tigertech_image

  """
  update multiples rows of table: "tigertech.image"
  """
  update_tigertech_image_many(
    """updates to execute, in order"""
    updates: [tigertech_image_updates!]!
  ): [tigertech_image_mutation_response]

  """
  update data of the table: "tigertech.product"
  """
  update_tigertech_product(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_product_set_input

    """filter the rows which have to be updated"""
    where: tigertech_product_bool_exp!
  ): tigertech_product_mutation_response

  """
  update single row of the table: "tigertech.product"
  """
  update_tigertech_product_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_product_set_input
    pk_columns: tigertech_product_pk_columns_input!
  ): tigertech_product

  """
  update multiples rows of table: "tigertech.product"
  """
  update_tigertech_product_many(
    """updates to execute, in order"""
    updates: [tigertech_product_updates!]!
  ): [tigertech_product_mutation_response]

  """
  update data of the table: "tigertech.product_sku"
  """
  update_tigertech_product_sku(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_product_sku_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_product_sku_set_input

    """filter the rows which have to be updated"""
    where: tigertech_product_sku_bool_exp!
  ): tigertech_product_sku_mutation_response

  """
  update single row of the table: "tigertech.product_sku"
  """
  update_tigertech_product_sku_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_product_sku_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_product_sku_set_input
    pk_columns: tigertech_product_sku_pk_columns_input!
  ): tigertech_product_sku

  """
  update multiples rows of table: "tigertech.product_sku"
  """
  update_tigertech_product_sku_many(
    """updates to execute, in order"""
    updates: [tigertech_product_sku_updates!]!
  ): [tigertech_product_sku_mutation_response]

  """
  update data of the table: "tigertech.specification"
  """
  update_tigertech_specification(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_specification_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_specification_set_input

    """filter the rows which have to be updated"""
    where: tigertech_specification_bool_exp!
  ): tigertech_specification_mutation_response

  """
  update single row of the table: "tigertech.specification"
  """
  update_tigertech_specification_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tigertech_specification_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tigertech_specification_set_input
    pk_columns: tigertech_specification_pk_columns_input!
  ): tigertech_specification

  """
  update multiples rows of table: "tigertech.specification"
  """
  update_tigertech_specification_many(
    """updates to execute, in order"""
    updates: [tigertech_specification_updates!]!
  ): [tigertech_specification_mutation_response]
}

"""
columns and relationships of "nanisore.Image"
"""
type nanisore_Image {
  created_at: timestamptz!
  from: String!
  id: Int!
  product_id: Int
  updated_at: timestamptz!
  url: String!
}

"""
aggregated selection of "nanisore.Image"
"""
type nanisore_Image_aggregate {
  aggregate: nanisore_Image_aggregate_fields
  nodes: [nanisore_Image!]!
}

input nanisore_Image_aggregate_bool_exp {
  count: nanisore_Image_aggregate_bool_exp_count
}

input nanisore_Image_aggregate_bool_exp_count {
  arguments: [nanisore_Image_select_column!]
  distinct: Boolean
  filter: nanisore_Image_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "nanisore.Image"
"""
type nanisore_Image_aggregate_fields {
  avg: nanisore_Image_avg_fields
  count(columns: [nanisore_Image_select_column!], distinct: Boolean): Int!
  max: nanisore_Image_max_fields
  min: nanisore_Image_min_fields
  stddev: nanisore_Image_stddev_fields
  stddev_pop: nanisore_Image_stddev_pop_fields
  stddev_samp: nanisore_Image_stddev_samp_fields
  sum: nanisore_Image_sum_fields
  var_pop: nanisore_Image_var_pop_fields
  var_samp: nanisore_Image_var_samp_fields
  variance: nanisore_Image_variance_fields
}

"""
order by aggregate values of table "nanisore.Image"
"""
input nanisore_Image_aggregate_order_by {
  avg: nanisore_Image_avg_order_by
  count: order_by
  max: nanisore_Image_max_order_by
  min: nanisore_Image_min_order_by
  stddev: nanisore_Image_stddev_order_by
  stddev_pop: nanisore_Image_stddev_pop_order_by
  stddev_samp: nanisore_Image_stddev_samp_order_by
  sum: nanisore_Image_sum_order_by
  var_pop: nanisore_Image_var_pop_order_by
  var_samp: nanisore_Image_var_samp_order_by
  variance: nanisore_Image_variance_order_by
}

"""
input type for inserting array relation for remote table "nanisore.Image"
"""
input nanisore_Image_arr_rel_insert_input {
  data: [nanisore_Image_insert_input!]!

  """upsert condition"""
  on_conflict: nanisore_Image_on_conflict
}

"""aggregate avg on columns"""
type nanisore_Image_avg_fields {
  id: Float
  product_id: Float
}

"""
order by avg() on columns of table "nanisore.Image"
"""
input nanisore_Image_avg_order_by {
  id: order_by
  product_id: order_by
}

"""
Boolean expression to filter rows from the table "nanisore.Image". All fields are combined with a logical 'AND'.
"""
input nanisore_Image_bool_exp {
  _and: [nanisore_Image_bool_exp!]
  _not: nanisore_Image_bool_exp
  _or: [nanisore_Image_bool_exp!]
  created_at: timestamptz_comparison_exp
  from: String_comparison_exp
  id: Int_comparison_exp
  product_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "nanisore.Image"
"""
enum nanisore_Image_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Images_pkey
}

"""
input type for incrementing numeric columns in table "nanisore.Image"
"""
input nanisore_Image_inc_input {
  id: Int
  product_id: Int
}

"""
input type for inserting data into table "nanisore.Image"
"""
input nanisore_Image_insert_input {
  created_at: timestamptz
  from: String
  id: Int
  product_id: Int
  updated_at: timestamptz
  url: String
}

"""aggregate max on columns"""
type nanisore_Image_max_fields {
  created_at: timestamptz
  from: String
  id: Int
  product_id: Int
  updated_at: timestamptz
  url: String
}

"""
order by max() on columns of table "nanisore.Image"
"""
input nanisore_Image_max_order_by {
  created_at: order_by
  from: order_by
  id: order_by
  product_id: order_by
  updated_at: order_by
  url: order_by
}

"""aggregate min on columns"""
type nanisore_Image_min_fields {
  created_at: timestamptz
  from: String
  id: Int
  product_id: Int
  updated_at: timestamptz
  url: String
}

"""
order by min() on columns of table "nanisore.Image"
"""
input nanisore_Image_min_order_by {
  created_at: order_by
  from: order_by
  id: order_by
  product_id: order_by
  updated_at: order_by
  url: order_by
}

"""
response of any mutation on the table "nanisore.Image"
"""
type nanisore_Image_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [nanisore_Image!]!
}

"""
input type for inserting object relation for remote table "nanisore.Image"
"""
input nanisore_Image_obj_rel_insert_input {
  data: nanisore_Image_insert_input!

  """upsert condition"""
  on_conflict: nanisore_Image_on_conflict
}

"""
on_conflict condition type for table "nanisore.Image"
"""
input nanisore_Image_on_conflict {
  constraint: nanisore_Image_constraint!
  update_columns: [nanisore_Image_update_column!]! = []
  where: nanisore_Image_bool_exp
}

"""Ordering options when selecting data from "nanisore.Image"."""
input nanisore_Image_order_by {
  created_at: order_by
  from: order_by
  id: order_by
  product_id: order_by
  updated_at: order_by
  url: order_by
}

"""primary key columns input for table: nanisore.Image"""
input nanisore_Image_pk_columns_input {
  id: Int!
}

"""
select columns of table "nanisore.Image"
"""
enum nanisore_Image_select_column {
  """column name"""
  created_at

  """column name"""
  from

  """column name"""
  id

  """column name"""
  product_id

  """column name"""
  updated_at

  """column name"""
  url
}

"""
input type for updating data in table "nanisore.Image"
"""
input nanisore_Image_set_input {
  created_at: timestamptz
  from: String
  id: Int
  product_id: Int
  updated_at: timestamptz
  url: String
}

"""aggregate stddev on columns"""
type nanisore_Image_stddev_fields {
  id: Float
  product_id: Float
}

"""
order by stddev() on columns of table "nanisore.Image"
"""
input nanisore_Image_stddev_order_by {
  id: order_by
  product_id: order_by
}

"""aggregate stddev_pop on columns"""
type nanisore_Image_stddev_pop_fields {
  id: Float
  product_id: Float
}

"""
order by stddev_pop() on columns of table "nanisore.Image"
"""
input nanisore_Image_stddev_pop_order_by {
  id: order_by
  product_id: order_by
}

"""aggregate stddev_samp on columns"""
type nanisore_Image_stddev_samp_fields {
  id: Float
  product_id: Float
}

"""
order by stddev_samp() on columns of table "nanisore.Image"
"""
input nanisore_Image_stddev_samp_order_by {
  id: order_by
  product_id: order_by
}

"""
Streaming cursor of the table "nanisore_Image"
"""
input nanisore_Image_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nanisore_Image_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nanisore_Image_stream_cursor_value_input {
  created_at: timestamptz
  from: String
  id: Int
  product_id: Int
  updated_at: timestamptz
  url: String
}

"""aggregate sum on columns"""
type nanisore_Image_sum_fields {
  id: Int
  product_id: Int
}

"""
order by sum() on columns of table "nanisore.Image"
"""
input nanisore_Image_sum_order_by {
  id: order_by
  product_id: order_by
}

"""
update columns of table "nanisore.Image"
"""
enum nanisore_Image_update_column {
  """column name"""
  created_at

  """column name"""
  from

  """column name"""
  id

  """column name"""
  product_id

  """column name"""
  updated_at

  """column name"""
  url
}

input nanisore_Image_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: nanisore_Image_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: nanisore_Image_set_input

  """filter the rows which have to be updated"""
  where: nanisore_Image_bool_exp!
}

"""aggregate var_pop on columns"""
type nanisore_Image_var_pop_fields {
  id: Float
  product_id: Float
}

"""
order by var_pop() on columns of table "nanisore.Image"
"""
input nanisore_Image_var_pop_order_by {
  id: order_by
  product_id: order_by
}

"""aggregate var_samp on columns"""
type nanisore_Image_var_samp_fields {
  id: Float
  product_id: Float
}

"""
order by var_samp() on columns of table "nanisore.Image"
"""
input nanisore_Image_var_samp_order_by {
  id: order_by
  product_id: order_by
}

"""aggregate variance on columns"""
type nanisore_Image_variance_fields {
  id: Float
  product_id: Float
}

"""
order by variance() on columns of table "nanisore.Image"
"""
input nanisore_Image_variance_order_by {
  id: order_by
  product_id: order_by
}

"""
columns and relationships of "nanisore.Platform"
"""
type nanisore_Platform {
  created_at: timestamptz!
  desc: String!
  id: Int!
  image: String!
  name: String!
}

"""
aggregated selection of "nanisore.Platform"
"""
type nanisore_Platform_aggregate {
  aggregate: nanisore_Platform_aggregate_fields
  nodes: [nanisore_Platform!]!
}

"""
aggregate fields of "nanisore.Platform"
"""
type nanisore_Platform_aggregate_fields {
  avg: nanisore_Platform_avg_fields
  count(columns: [nanisore_Platform_select_column!], distinct: Boolean): Int!
  max: nanisore_Platform_max_fields
  min: nanisore_Platform_min_fields
  stddev: nanisore_Platform_stddev_fields
  stddev_pop: nanisore_Platform_stddev_pop_fields
  stddev_samp: nanisore_Platform_stddev_samp_fields
  sum: nanisore_Platform_sum_fields
  var_pop: nanisore_Platform_var_pop_fields
  var_samp: nanisore_Platform_var_samp_fields
  variance: nanisore_Platform_variance_fields
}

"""aggregate avg on columns"""
type nanisore_Platform_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "nanisore.Platform". All fields are combined with a logical 'AND'.
"""
input nanisore_Platform_bool_exp {
  _and: [nanisore_Platform_bool_exp!]
  _not: nanisore_Platform_bool_exp
  _or: [nanisore_Platform_bool_exp!]
  created_at: timestamptz_comparison_exp
  desc: String_comparison_exp
  id: Int_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "nanisore.Platform"
"""
enum nanisore_Platform_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Platform_pkey
}

"""
input type for incrementing numeric columns in table "nanisore.Platform"
"""
input nanisore_Platform_inc_input {
  id: Int
}

"""
input type for inserting data into table "nanisore.Platform"
"""
input nanisore_Platform_insert_input {
  created_at: timestamptz
  desc: String
  id: Int
  image: String
  name: String
}

"""aggregate max on columns"""
type nanisore_Platform_max_fields {
  created_at: timestamptz
  desc: String
  id: Int
  image: String
  name: String
}

"""aggregate min on columns"""
type nanisore_Platform_min_fields {
  created_at: timestamptz
  desc: String
  id: Int
  image: String
  name: String
}

"""
response of any mutation on the table "nanisore.Platform"
"""
type nanisore_Platform_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [nanisore_Platform!]!
}

"""
input type for inserting object relation for remote table "nanisore.Platform"
"""
input nanisore_Platform_obj_rel_insert_input {
  data: nanisore_Platform_insert_input!

  """upsert condition"""
  on_conflict: nanisore_Platform_on_conflict
}

"""
on_conflict condition type for table "nanisore.Platform"
"""
input nanisore_Platform_on_conflict {
  constraint: nanisore_Platform_constraint!
  update_columns: [nanisore_Platform_update_column!]! = []
  where: nanisore_Platform_bool_exp
}

"""Ordering options when selecting data from "nanisore.Platform"."""
input nanisore_Platform_order_by {
  created_at: order_by
  desc: order_by
  id: order_by
  image: order_by
  name: order_by
}

"""primary key columns input for table: nanisore.Platform"""
input nanisore_Platform_pk_columns_input {
  id: Int!
}

"""
select columns of table "nanisore.Platform"
"""
enum nanisore_Platform_select_column {
  """column name"""
  created_at

  """column name"""
  desc

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name
}

"""
input type for updating data in table "nanisore.Platform"
"""
input nanisore_Platform_set_input {
  created_at: timestamptz
  desc: String
  id: Int
  image: String
  name: String
}

"""aggregate stddev on columns"""
type nanisore_Platform_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type nanisore_Platform_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type nanisore_Platform_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "nanisore_Platform"
"""
input nanisore_Platform_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nanisore_Platform_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nanisore_Platform_stream_cursor_value_input {
  created_at: timestamptz
  desc: String
  id: Int
  image: String
  name: String
}

"""aggregate sum on columns"""
type nanisore_Platform_sum_fields {
  id: Int
}

"""
update columns of table "nanisore.Platform"
"""
enum nanisore_Platform_update_column {
  """column name"""
  created_at

  """column name"""
  desc

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name
}

input nanisore_Platform_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: nanisore_Platform_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: nanisore_Platform_set_input

  """filter the rows which have to be updated"""
  where: nanisore_Platform_bool_exp!
}

"""aggregate var_pop on columns"""
type nanisore_Platform_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type nanisore_Platform_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type nanisore_Platform_variance_fields {
  id: Float
}

"""
columns and relationships of "nanisore.Product"
"""
type nanisore_Product {
  """An object relationship"""
  cover_image: nanisore_Image
  cover_image_id: Int
  created_at: timestamptz!
  desc: String!
  id: Int!

  """An array relationship"""
  images(
    """distinct select on columns"""
    distinct_on: [nanisore_Image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Image_order_by!]

    """filter the rows returned"""
    where: nanisore_Image_bool_exp
  ): [nanisore_Image!]!

  """An aggregate relationship"""
  images_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Image_order_by!]

    """filter the rows returned"""
    where: nanisore_Image_bool_exp
  ): nanisore_Image_aggregate!
  name: String!
  original_id: String!

  """An object relationship"""
  platform: nanisore_Platform
  platform_id: Int
  price: numeric!

  """An array relationship"""
  specifications(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): [nanisore_Product_Specification!]!

  """An aggregate relationship"""
  specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): nanisore_Product_Specification_aggregate!
  status: String!
  updated_at: timestamptz!
}

"""
columns and relationships of "nanisore.Product_Specification"
"""
type nanisore_Product_Specification {
  id: Int!

  """An object relationship"""
  product: nanisore_Product
  product_id: Int!

  """An object relationship"""
  specification: nanisore_Specification
  specification_id: Int!
}

"""
aggregated selection of "nanisore.Product_Specification"
"""
type nanisore_Product_Specification_aggregate {
  aggregate: nanisore_Product_Specification_aggregate_fields
  nodes: [nanisore_Product_Specification!]!
}

input nanisore_Product_Specification_aggregate_bool_exp {
  count: nanisore_Product_Specification_aggregate_bool_exp_count
}

input nanisore_Product_Specification_aggregate_bool_exp_count {
  arguments: [nanisore_Product_Specification_select_column!]
  distinct: Boolean
  filter: nanisore_Product_Specification_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "nanisore.Product_Specification"
"""
type nanisore_Product_Specification_aggregate_fields {
  avg: nanisore_Product_Specification_avg_fields
  count(columns: [nanisore_Product_Specification_select_column!], distinct: Boolean): Int!
  max: nanisore_Product_Specification_max_fields
  min: nanisore_Product_Specification_min_fields
  stddev: nanisore_Product_Specification_stddev_fields
  stddev_pop: nanisore_Product_Specification_stddev_pop_fields
  stddev_samp: nanisore_Product_Specification_stddev_samp_fields
  sum: nanisore_Product_Specification_sum_fields
  var_pop: nanisore_Product_Specification_var_pop_fields
  var_samp: nanisore_Product_Specification_var_samp_fields
  variance: nanisore_Product_Specification_variance_fields
}

"""
order by aggregate values of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_aggregate_order_by {
  avg: nanisore_Product_Specification_avg_order_by
  count: order_by
  max: nanisore_Product_Specification_max_order_by
  min: nanisore_Product_Specification_min_order_by
  stddev: nanisore_Product_Specification_stddev_order_by
  stddev_pop: nanisore_Product_Specification_stddev_pop_order_by
  stddev_samp: nanisore_Product_Specification_stddev_samp_order_by
  sum: nanisore_Product_Specification_sum_order_by
  var_pop: nanisore_Product_Specification_var_pop_order_by
  var_samp: nanisore_Product_Specification_var_samp_order_by
  variance: nanisore_Product_Specification_variance_order_by
}

"""
input type for inserting array relation for remote table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_arr_rel_insert_input {
  data: [nanisore_Product_Specification_insert_input!]!

  """upsert condition"""
  on_conflict: nanisore_Product_Specification_on_conflict
}

"""aggregate avg on columns"""
type nanisore_Product_Specification_avg_fields {
  id: Float
  product_id: Float
  specification_id: Float
}

"""
order by avg() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_avg_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""
Boolean expression to filter rows from the table "nanisore.Product_Specification". All fields are combined with a logical 'AND'.
"""
input nanisore_Product_Specification_bool_exp {
  _and: [nanisore_Product_Specification_bool_exp!]
  _not: nanisore_Product_Specification_bool_exp
  _or: [nanisore_Product_Specification_bool_exp!]
  id: Int_comparison_exp
  product: nanisore_Product_bool_exp
  product_id: Int_comparison_exp
  specification: nanisore_Specification_bool_exp
  specification_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "nanisore.Product_Specification"
"""
enum nanisore_Product_Specification_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Product_Specification_pkey
}

"""
input type for incrementing numeric columns in table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_inc_input {
  id: Int
  product_id: Int
  specification_id: Int
}

"""
input type for inserting data into table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_insert_input {
  id: Int
  product: nanisore_Product_obj_rel_insert_input
  product_id: Int
  specification: nanisore_Specification_obj_rel_insert_input
  specification_id: Int
}

"""aggregate max on columns"""
type nanisore_Product_Specification_max_fields {
  id: Int
  product_id: Int
  specification_id: Int
}

"""
order by max() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_max_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""aggregate min on columns"""
type nanisore_Product_Specification_min_fields {
  id: Int
  product_id: Int
  specification_id: Int
}

"""
order by min() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_min_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""
response of any mutation on the table "nanisore.Product_Specification"
"""
type nanisore_Product_Specification_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [nanisore_Product_Specification!]!
}

"""
on_conflict condition type for table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_on_conflict {
  constraint: nanisore_Product_Specification_constraint!
  update_columns: [nanisore_Product_Specification_update_column!]! = []
  where: nanisore_Product_Specification_bool_exp
}

"""
Ordering options when selecting data from "nanisore.Product_Specification".
"""
input nanisore_Product_Specification_order_by {
  id: order_by
  product: nanisore_Product_order_by
  product_id: order_by
  specification: nanisore_Specification_order_by
  specification_id: order_by
}

"""primary key columns input for table: nanisore.Product_Specification"""
input nanisore_Product_Specification_pk_columns_input {
  id: Int!
}

"""
select columns of table "nanisore.Product_Specification"
"""
enum nanisore_Product_Specification_select_column {
  """column name"""
  id

  """column name"""
  product_id

  """column name"""
  specification_id
}

"""
input type for updating data in table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_set_input {
  id: Int
  product_id: Int
  specification_id: Int
}

"""aggregate stddev on columns"""
type nanisore_Product_Specification_stddev_fields {
  id: Float
  product_id: Float
  specification_id: Float
}

"""
order by stddev() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_stddev_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""aggregate stddev_pop on columns"""
type nanisore_Product_Specification_stddev_pop_fields {
  id: Float
  product_id: Float
  specification_id: Float
}

"""
order by stddev_pop() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_stddev_pop_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""aggregate stddev_samp on columns"""
type nanisore_Product_Specification_stddev_samp_fields {
  id: Float
  product_id: Float
  specification_id: Float
}

"""
order by stddev_samp() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_stddev_samp_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""
Streaming cursor of the table "nanisore_Product_Specification"
"""
input nanisore_Product_Specification_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nanisore_Product_Specification_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nanisore_Product_Specification_stream_cursor_value_input {
  id: Int
  product_id: Int
  specification_id: Int
}

"""aggregate sum on columns"""
type nanisore_Product_Specification_sum_fields {
  id: Int
  product_id: Int
  specification_id: Int
}

"""
order by sum() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_sum_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""
update columns of table "nanisore.Product_Specification"
"""
enum nanisore_Product_Specification_update_column {
  """column name"""
  id

  """column name"""
  product_id

  """column name"""
  specification_id
}

input nanisore_Product_Specification_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: nanisore_Product_Specification_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: nanisore_Product_Specification_set_input

  """filter the rows which have to be updated"""
  where: nanisore_Product_Specification_bool_exp!
}

"""aggregate var_pop on columns"""
type nanisore_Product_Specification_var_pop_fields {
  id: Float
  product_id: Float
  specification_id: Float
}

"""
order by var_pop() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_var_pop_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""aggregate var_samp on columns"""
type nanisore_Product_Specification_var_samp_fields {
  id: Float
  product_id: Float
  specification_id: Float
}

"""
order by var_samp() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_var_samp_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""aggregate variance on columns"""
type nanisore_Product_Specification_variance_fields {
  id: Float
  product_id: Float
  specification_id: Float
}

"""
order by variance() on columns of table "nanisore.Product_Specification"
"""
input nanisore_Product_Specification_variance_order_by {
  id: order_by
  product_id: order_by
  specification_id: order_by
}

"""
aggregated selection of "nanisore.Product"
"""
type nanisore_Product_aggregate {
  aggregate: nanisore_Product_aggregate_fields
  nodes: [nanisore_Product!]!
}

"""
aggregate fields of "nanisore.Product"
"""
type nanisore_Product_aggregate_fields {
  avg: nanisore_Product_avg_fields
  count(columns: [nanisore_Product_select_column!], distinct: Boolean): Int!
  max: nanisore_Product_max_fields
  min: nanisore_Product_min_fields
  stddev: nanisore_Product_stddev_fields
  stddev_pop: nanisore_Product_stddev_pop_fields
  stddev_samp: nanisore_Product_stddev_samp_fields
  sum: nanisore_Product_sum_fields
  var_pop: nanisore_Product_var_pop_fields
  var_samp: nanisore_Product_var_samp_fields
  variance: nanisore_Product_variance_fields
}

"""aggregate avg on columns"""
type nanisore_Product_avg_fields {
  cover_image_id: Float
  id: Float
  platform_id: Float
  price: Float
}

"""
Boolean expression to filter rows from the table "nanisore.Product". All fields are combined with a logical 'AND'.
"""
input nanisore_Product_bool_exp {
  _and: [nanisore_Product_bool_exp!]
  _not: nanisore_Product_bool_exp
  _or: [nanisore_Product_bool_exp!]
  cover_image: nanisore_Image_bool_exp
  cover_image_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  desc: String_comparison_exp
  id: Int_comparison_exp
  images: nanisore_Image_bool_exp
  images_aggregate: nanisore_Image_aggregate_bool_exp
  name: String_comparison_exp
  original_id: String_comparison_exp
  platform: nanisore_Platform_bool_exp
  platform_id: Int_comparison_exp
  price: numeric_comparison_exp
  specifications: nanisore_Product_Specification_bool_exp
  specifications_aggregate: nanisore_Product_Specification_aggregate_bool_exp
  status: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "nanisore.Product"
"""
enum nanisore_Product_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  product_pkey
}

"""
input type for incrementing numeric columns in table "nanisore.Product"
"""
input nanisore_Product_inc_input {
  cover_image_id: Int
  id: Int
  platform_id: Int
  price: numeric
}

"""
input type for inserting data into table "nanisore.Product"
"""
input nanisore_Product_insert_input {
  cover_image: nanisore_Image_obj_rel_insert_input
  cover_image_id: Int
  created_at: timestamptz
  desc: String
  id: Int
  images: nanisore_Image_arr_rel_insert_input
  name: String
  original_id: String
  platform: nanisore_Platform_obj_rel_insert_input
  platform_id: Int
  price: numeric
  specifications: nanisore_Product_Specification_arr_rel_insert_input
  status: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type nanisore_Product_max_fields {
  cover_image_id: Int
  created_at: timestamptz
  desc: String
  id: Int
  name: String
  original_id: String
  platform_id: Int
  price: numeric
  status: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type nanisore_Product_min_fields {
  cover_image_id: Int
  created_at: timestamptz
  desc: String
  id: Int
  name: String
  original_id: String
  platform_id: Int
  price: numeric
  status: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "nanisore.Product"
"""
type nanisore_Product_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [nanisore_Product!]!
}

"""
input type for inserting object relation for remote table "nanisore.Product"
"""
input nanisore_Product_obj_rel_insert_input {
  data: nanisore_Product_insert_input!

  """upsert condition"""
  on_conflict: nanisore_Product_on_conflict
}

"""
on_conflict condition type for table "nanisore.Product"
"""
input nanisore_Product_on_conflict {
  constraint: nanisore_Product_constraint!
  update_columns: [nanisore_Product_update_column!]! = []
  where: nanisore_Product_bool_exp
}

"""Ordering options when selecting data from "nanisore.Product"."""
input nanisore_Product_order_by {
  cover_image: nanisore_Image_order_by
  cover_image_id: order_by
  created_at: order_by
  desc: order_by
  id: order_by
  images_aggregate: nanisore_Image_aggregate_order_by
  name: order_by
  original_id: order_by
  platform: nanisore_Platform_order_by
  platform_id: order_by
  price: order_by
  specifications_aggregate: nanisore_Product_Specification_aggregate_order_by
  status: order_by
  updated_at: order_by
}

"""primary key columns input for table: nanisore.Product"""
input nanisore_Product_pk_columns_input {
  id: Int!
}

"""
select columns of table "nanisore.Product"
"""
enum nanisore_Product_select_column {
  """column name"""
  cover_image_id

  """column name"""
  created_at

  """column name"""
  desc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  original_id

  """column name"""
  platform_id

  """column name"""
  price

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "nanisore.Product"
"""
input nanisore_Product_set_input {
  cover_image_id: Int
  created_at: timestamptz
  desc: String
  id: Int
  name: String
  original_id: String
  platform_id: Int
  price: numeric
  status: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type nanisore_Product_stddev_fields {
  cover_image_id: Float
  id: Float
  platform_id: Float
  price: Float
}

"""aggregate stddev_pop on columns"""
type nanisore_Product_stddev_pop_fields {
  cover_image_id: Float
  id: Float
  platform_id: Float
  price: Float
}

"""aggregate stddev_samp on columns"""
type nanisore_Product_stddev_samp_fields {
  cover_image_id: Float
  id: Float
  platform_id: Float
  price: Float
}

"""
Streaming cursor of the table "nanisore_Product"
"""
input nanisore_Product_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nanisore_Product_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nanisore_Product_stream_cursor_value_input {
  cover_image_id: Int
  created_at: timestamptz
  desc: String
  id: Int
  name: String
  original_id: String
  platform_id: Int
  price: numeric
  status: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type nanisore_Product_sum_fields {
  cover_image_id: Int
  id: Int
  platform_id: Int
  price: numeric
}

"""
update columns of table "nanisore.Product"
"""
enum nanisore_Product_update_column {
  """column name"""
  cover_image_id

  """column name"""
  created_at

  """column name"""
  desc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  original_id

  """column name"""
  platform_id

  """column name"""
  price

  """column name"""
  status

  """column name"""
  updated_at
}

input nanisore_Product_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: nanisore_Product_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: nanisore_Product_set_input

  """filter the rows which have to be updated"""
  where: nanisore_Product_bool_exp!
}

"""aggregate var_pop on columns"""
type nanisore_Product_var_pop_fields {
  cover_image_id: Float
  id: Float
  platform_id: Float
  price: Float
}

"""aggregate var_samp on columns"""
type nanisore_Product_var_samp_fields {
  cover_image_id: Float
  id: Float
  platform_id: Float
  price: Float
}

"""aggregate variance on columns"""
type nanisore_Product_variance_fields {
  cover_image_id: Float
  id: Float
  platform_id: Float
  price: Float
}

"""
columns and relationships of "nanisore.Specification"
"""
type nanisore_Specification {
  id: Int!

  """An array relationship"""
  specification_products(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): [nanisore_Product_Specification!]!

  """An aggregate relationship"""
  specification_products_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): nanisore_Product_Specification_aggregate!
  type: String!
  value: String!
}

"""
aggregated selection of "nanisore.Specification"
"""
type nanisore_Specification_aggregate {
  aggregate: nanisore_Specification_aggregate_fields
  nodes: [nanisore_Specification!]!
}

"""
aggregate fields of "nanisore.Specification"
"""
type nanisore_Specification_aggregate_fields {
  avg: nanisore_Specification_avg_fields
  count(columns: [nanisore_Specification_select_column!], distinct: Boolean): Int!
  max: nanisore_Specification_max_fields
  min: nanisore_Specification_min_fields
  stddev: nanisore_Specification_stddev_fields
  stddev_pop: nanisore_Specification_stddev_pop_fields
  stddev_samp: nanisore_Specification_stddev_samp_fields
  sum: nanisore_Specification_sum_fields
  var_pop: nanisore_Specification_var_pop_fields
  var_samp: nanisore_Specification_var_samp_fields
  variance: nanisore_Specification_variance_fields
}

"""aggregate avg on columns"""
type nanisore_Specification_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "nanisore.Specification". All fields are combined with a logical 'AND'.
"""
input nanisore_Specification_bool_exp {
  _and: [nanisore_Specification_bool_exp!]
  _not: nanisore_Specification_bool_exp
  _or: [nanisore_Specification_bool_exp!]
  id: Int_comparison_exp
  specification_products: nanisore_Product_Specification_bool_exp
  specification_products_aggregate: nanisore_Product_Specification_aggregate_bool_exp
  type: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "nanisore.Specification"
"""
enum nanisore_Specification_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Specification_pkey
}

"""
input type for incrementing numeric columns in table "nanisore.Specification"
"""
input nanisore_Specification_inc_input {
  id: Int
}

"""
input type for inserting data into table "nanisore.Specification"
"""
input nanisore_Specification_insert_input {
  id: Int
  specification_products: nanisore_Product_Specification_arr_rel_insert_input
  type: String
  value: String
}

"""aggregate max on columns"""
type nanisore_Specification_max_fields {
  id: Int
  type: String
  value: String
}

"""aggregate min on columns"""
type nanisore_Specification_min_fields {
  id: Int
  type: String
  value: String
}

"""
response of any mutation on the table "nanisore.Specification"
"""
type nanisore_Specification_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [nanisore_Specification!]!
}

"""
input type for inserting object relation for remote table "nanisore.Specification"
"""
input nanisore_Specification_obj_rel_insert_input {
  data: nanisore_Specification_insert_input!

  """upsert condition"""
  on_conflict: nanisore_Specification_on_conflict
}

"""
on_conflict condition type for table "nanisore.Specification"
"""
input nanisore_Specification_on_conflict {
  constraint: nanisore_Specification_constraint!
  update_columns: [nanisore_Specification_update_column!]! = []
  where: nanisore_Specification_bool_exp
}

"""Ordering options when selecting data from "nanisore.Specification"."""
input nanisore_Specification_order_by {
  id: order_by
  specification_products_aggregate: nanisore_Product_Specification_aggregate_order_by
  type: order_by
  value: order_by
}

"""primary key columns input for table: nanisore.Specification"""
input nanisore_Specification_pk_columns_input {
  id: Int!
}

"""
select columns of table "nanisore.Specification"
"""
enum nanisore_Specification_select_column {
  """column name"""
  id

  """column name"""
  type

  """column name"""
  value
}

"""
input type for updating data in table "nanisore.Specification"
"""
input nanisore_Specification_set_input {
  id: Int
  type: String
  value: String
}

"""aggregate stddev on columns"""
type nanisore_Specification_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type nanisore_Specification_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type nanisore_Specification_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "nanisore_Specification"
"""
input nanisore_Specification_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: nanisore_Specification_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input nanisore_Specification_stream_cursor_value_input {
  id: Int
  type: String
  value: String
}

"""aggregate sum on columns"""
type nanisore_Specification_sum_fields {
  id: Int
}

"""
update columns of table "nanisore.Specification"
"""
enum nanisore_Specification_update_column {
  """column name"""
  id

  """column name"""
  type

  """column name"""
  value
}

input nanisore_Specification_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: nanisore_Specification_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: nanisore_Specification_set_input

  """filter the rows which have to be updated"""
  where: nanisore_Specification_bool_exp!
}

"""aggregate var_pop on columns"""
type nanisore_Specification_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type nanisore_Specification_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type nanisore_Specification_variance_fields {
  id: Float
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "nanisore.Image"
  """
  nanisore_Image(
    """distinct select on columns"""
    distinct_on: [nanisore_Image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Image_order_by!]

    """filter the rows returned"""
    where: nanisore_Image_bool_exp
  ): [nanisore_Image!]!

  """
  fetch aggregated fields from the table: "nanisore.Image"
  """
  nanisore_Image_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Image_order_by!]

    """filter the rows returned"""
    where: nanisore_Image_bool_exp
  ): nanisore_Image_aggregate!

  """fetch data from the table: "nanisore.Image" using primary key columns"""
  nanisore_Image_by_pk(id: Int!): nanisore_Image

  """
  fetch data from the table: "nanisore.Platform"
  """
  nanisore_Platform(
    """distinct select on columns"""
    distinct_on: [nanisore_Platform_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Platform_order_by!]

    """filter the rows returned"""
    where: nanisore_Platform_bool_exp
  ): [nanisore_Platform!]!

  """
  fetch aggregated fields from the table: "nanisore.Platform"
  """
  nanisore_Platform_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Platform_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Platform_order_by!]

    """filter the rows returned"""
    where: nanisore_Platform_bool_exp
  ): nanisore_Platform_aggregate!

  """
  fetch data from the table: "nanisore.Platform" using primary key columns
  """
  nanisore_Platform_by_pk(id: Int!): nanisore_Platform

  """
  fetch data from the table: "nanisore.Product"
  """
  nanisore_Product(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_bool_exp
  ): [nanisore_Product!]!

  """
  fetch data from the table: "nanisore.Product_Specification"
  """
  nanisore_Product_Specification(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): [nanisore_Product_Specification!]!

  """
  fetch aggregated fields from the table: "nanisore.Product_Specification"
  """
  nanisore_Product_Specification_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): nanisore_Product_Specification_aggregate!

  """
  fetch data from the table: "nanisore.Product_Specification" using primary key columns
  """
  nanisore_Product_Specification_by_pk(id: Int!): nanisore_Product_Specification

  """
  fetch aggregated fields from the table: "nanisore.Product"
  """
  nanisore_Product_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_bool_exp
  ): nanisore_Product_aggregate!

  """
  fetch data from the table: "nanisore.Product" using primary key columns
  """
  nanisore_Product_by_pk(id: Int!): nanisore_Product

  """
  fetch data from the table: "nanisore.Specification"
  """
  nanisore_Specification(
    """distinct select on columns"""
    distinct_on: [nanisore_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Specification_bool_exp
  ): [nanisore_Specification!]!

  """
  fetch aggregated fields from the table: "nanisore.Specification"
  """
  nanisore_Specification_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Specification_bool_exp
  ): nanisore_Specification_aggregate!

  """
  fetch data from the table: "nanisore.Specification" using primary key columns
  """
  nanisore_Specification_by_pk(id: Int!): nanisore_Specification

  """
  fetch data from the table: "scraper.item"
  """
  scraper_item(
    """distinct select on columns"""
    distinct_on: [scraper_item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_item_order_by!]

    """filter the rows returned"""
    where: scraper_item_bool_exp
  ): [scraper_item!]!

  """
  fetch aggregated fields from the table: "scraper.item"
  """
  scraper_item_aggregate(
    """distinct select on columns"""
    distinct_on: [scraper_item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_item_order_by!]

    """filter the rows returned"""
    where: scraper_item_bool_exp
  ): scraper_item_aggregate!

  """fetch data from the table: "scraper.item" using primary key columns"""
  scraper_item_by_pk(id: Int!): scraper_item

  """
  fetch data from the table: "scraper.run"
  """
  scraper_run(
    """distinct select on columns"""
    distinct_on: [scraper_run_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_run_order_by!]

    """filter the rows returned"""
    where: scraper_run_bool_exp
  ): [scraper_run!]!

  """
  fetch aggregated fields from the table: "scraper.run"
  """
  scraper_run_aggregate(
    """distinct select on columns"""
    distinct_on: [scraper_run_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_run_order_by!]

    """filter the rows returned"""
    where: scraper_run_bool_exp
  ): scraper_run_aggregate!

  """fetch data from the table: "scraper.run" using primary key columns"""
  scraper_run_by_pk(id: Int!): scraper_run

  """
  fetch data from the table: "tigertech.image"
  """
  tigertech_image(
    """distinct select on columns"""
    distinct_on: [tigertech_image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_image_order_by!]

    """filter the rows returned"""
    where: tigertech_image_bool_exp
  ): [tigertech_image!]!

  """
  fetch aggregated fields from the table: "tigertech.image"
  """
  tigertech_image_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_image_order_by!]

    """filter the rows returned"""
    where: tigertech_image_bool_exp
  ): tigertech_image_aggregate!

  """fetch data from the table: "tigertech.image" using primary key columns"""
  tigertech_image_by_pk(id: bigint!): tigertech_image

  """
  fetch data from the table: "tigertech.product"
  """
  tigertech_product(
    """distinct select on columns"""
    distinct_on: [tigertech_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_order_by!]

    """filter the rows returned"""
    where: tigertech_product_bool_exp
  ): [tigertech_product!]!

  """
  fetch aggregated fields from the table: "tigertech.product"
  """
  tigertech_product_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_order_by!]

    """filter the rows returned"""
    where: tigertech_product_bool_exp
  ): tigertech_product_aggregate!

  """
  fetch data from the table: "tigertech.product" using primary key columns
  """
  tigertech_product_by_pk(id: bigint!): tigertech_product

  """
  fetch data from the table: "tigertech.product_sku"
  """
  tigertech_product_sku(
    """distinct select on columns"""
    distinct_on: [tigertech_product_sku_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_sku_order_by!]

    """filter the rows returned"""
    where: tigertech_product_sku_bool_exp
  ): [tigertech_product_sku!]!

  """
  fetch aggregated fields from the table: "tigertech.product_sku"
  """
  tigertech_product_sku_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_product_sku_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_sku_order_by!]

    """filter the rows returned"""
    where: tigertech_product_sku_bool_exp
  ): tigertech_product_sku_aggregate!

  """
  fetch data from the table: "tigertech.product_sku" using primary key columns
  """
  tigertech_product_sku_by_pk(id: bigint!): tigertech_product_sku

  """
  fetch data from the table: "tigertech.specification"
  """
  tigertech_specification(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): [tigertech_specification!]!

  """
  fetch aggregated fields from the table: "tigertech.specification"
  """
  tigertech_specification_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): tigertech_specification_aggregate!

  """
  fetch data from the table: "tigertech.specification" using primary key columns
  """
  tigertech_specification_by_pk(id: bigint!): tigertech_specification
}

"""
columns and relationships of "scraper.item"
"""
type scraper_item {
  created_at: timestamptz!
  from: String!
  id: Int!
  image: String!
  link: String!
  platform: String!
  run_id: String!
}

"""
aggregated selection of "scraper.item"
"""
type scraper_item_aggregate {
  aggregate: scraper_item_aggregate_fields
  nodes: [scraper_item!]!
}

"""
aggregate fields of "scraper.item"
"""
type scraper_item_aggregate_fields {
  avg: scraper_item_avg_fields
  count(columns: [scraper_item_select_column!], distinct: Boolean): Int!
  max: scraper_item_max_fields
  min: scraper_item_min_fields
  stddev: scraper_item_stddev_fields
  stddev_pop: scraper_item_stddev_pop_fields
  stddev_samp: scraper_item_stddev_samp_fields
  sum: scraper_item_sum_fields
  var_pop: scraper_item_var_pop_fields
  var_samp: scraper_item_var_samp_fields
  variance: scraper_item_variance_fields
}

"""aggregate avg on columns"""
type scraper_item_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "scraper.item". All fields are combined with a logical 'AND'.
"""
input scraper_item_bool_exp {
  _and: [scraper_item_bool_exp!]
  _not: scraper_item_bool_exp
  _or: [scraper_item_bool_exp!]
  created_at: timestamptz_comparison_exp
  from: String_comparison_exp
  id: Int_comparison_exp
  image: String_comparison_exp
  link: String_comparison_exp
  platform: String_comparison_exp
  run_id: String_comparison_exp
}

"""
unique or primary key constraints on table "scraper.item"
"""
enum scraper_item_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  item_pkey
}

"""
input type for incrementing numeric columns in table "scraper.item"
"""
input scraper_item_inc_input {
  id: Int
}

"""
input type for inserting data into table "scraper.item"
"""
input scraper_item_insert_input {
  created_at: timestamptz
  from: String
  id: Int
  image: String
  link: String
  platform: String
  run_id: String
}

"""aggregate max on columns"""
type scraper_item_max_fields {
  created_at: timestamptz
  from: String
  id: Int
  image: String
  link: String
  platform: String
  run_id: String
}

"""aggregate min on columns"""
type scraper_item_min_fields {
  created_at: timestamptz
  from: String
  id: Int
  image: String
  link: String
  platform: String
  run_id: String
}

"""
response of any mutation on the table "scraper.item"
"""
type scraper_item_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [scraper_item!]!
}

"""
on_conflict condition type for table "scraper.item"
"""
input scraper_item_on_conflict {
  constraint: scraper_item_constraint!
  update_columns: [scraper_item_update_column!]! = []
  where: scraper_item_bool_exp
}

"""Ordering options when selecting data from "scraper.item"."""
input scraper_item_order_by {
  created_at: order_by
  from: order_by
  id: order_by
  image: order_by
  link: order_by
  platform: order_by
  run_id: order_by
}

"""primary key columns input for table: scraper.item"""
input scraper_item_pk_columns_input {
  id: Int!
}

"""
select columns of table "scraper.item"
"""
enum scraper_item_select_column {
  """column name"""
  created_at

  """column name"""
  from

  """column name"""
  id

  """column name"""
  image

  """column name"""
  link

  """column name"""
  platform

  """column name"""
  run_id
}

"""
input type for updating data in table "scraper.item"
"""
input scraper_item_set_input {
  created_at: timestamptz
  from: String
  id: Int
  image: String
  link: String
  platform: String
  run_id: String
}

"""aggregate stddev on columns"""
type scraper_item_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type scraper_item_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type scraper_item_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "scraper_item"
"""
input scraper_item_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: scraper_item_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input scraper_item_stream_cursor_value_input {
  created_at: timestamptz
  from: String
  id: Int
  image: String
  link: String
  platform: String
  run_id: String
}

"""aggregate sum on columns"""
type scraper_item_sum_fields {
  id: Int
}

"""
update columns of table "scraper.item"
"""
enum scraper_item_update_column {
  """column name"""
  created_at

  """column name"""
  from

  """column name"""
  id

  """column name"""
  image

  """column name"""
  link

  """column name"""
  platform

  """column name"""
  run_id
}

input scraper_item_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: scraper_item_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: scraper_item_set_input

  """filter the rows which have to be updated"""
  where: scraper_item_bool_exp!
}

"""aggregate var_pop on columns"""
type scraper_item_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type scraper_item_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type scraper_item_variance_fields {
  id: Float
}

"""
columns and relationships of "scraper.run"
"""
type scraper_run {
  created_at: timestamptz!
  id: Int!
  keywords: String
  run_id: String!
  status: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "scraper.run"
"""
type scraper_run_aggregate {
  aggregate: scraper_run_aggregate_fields
  nodes: [scraper_run!]!
}

"""
aggregate fields of "scraper.run"
"""
type scraper_run_aggregate_fields {
  avg: scraper_run_avg_fields
  count(columns: [scraper_run_select_column!], distinct: Boolean): Int!
  max: scraper_run_max_fields
  min: scraper_run_min_fields
  stddev: scraper_run_stddev_fields
  stddev_pop: scraper_run_stddev_pop_fields
  stddev_samp: scraper_run_stddev_samp_fields
  sum: scraper_run_sum_fields
  var_pop: scraper_run_var_pop_fields
  var_samp: scraper_run_var_samp_fields
  variance: scraper_run_variance_fields
}

"""aggregate avg on columns"""
type scraper_run_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "scraper.run". All fields are combined with a logical 'AND'.
"""
input scraper_run_bool_exp {
  _and: [scraper_run_bool_exp!]
  _not: scraper_run_bool_exp
  _or: [scraper_run_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  keywords: String_comparison_exp
  run_id: String_comparison_exp
  status: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "scraper.run"
"""
enum scraper_run_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  run_pkey
}

"""
input type for incrementing numeric columns in table "scraper.run"
"""
input scraper_run_inc_input {
  id: Int
}

"""
input type for inserting data into table "scraper.run"
"""
input scraper_run_insert_input {
  created_at: timestamptz
  id: Int
  keywords: String
  run_id: String
  status: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type scraper_run_max_fields {
  created_at: timestamptz
  id: Int
  keywords: String
  run_id: String
  status: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type scraper_run_min_fields {
  created_at: timestamptz
  id: Int
  keywords: String
  run_id: String
  status: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "scraper.run"
"""
type scraper_run_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [scraper_run!]!
}

"""
on_conflict condition type for table "scraper.run"
"""
input scraper_run_on_conflict {
  constraint: scraper_run_constraint!
  update_columns: [scraper_run_update_column!]! = []
  where: scraper_run_bool_exp
}

"""Ordering options when selecting data from "scraper.run"."""
input scraper_run_order_by {
  created_at: order_by
  id: order_by
  keywords: order_by
  run_id: order_by
  status: order_by
  updated_at: order_by
}

"""primary key columns input for table: scraper.run"""
input scraper_run_pk_columns_input {
  id: Int!
}

"""
select columns of table "scraper.run"
"""
enum scraper_run_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  keywords

  """column name"""
  run_id

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "scraper.run"
"""
input scraper_run_set_input {
  created_at: timestamptz
  id: Int
  keywords: String
  run_id: String
  status: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type scraper_run_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type scraper_run_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type scraper_run_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "scraper_run"
"""
input scraper_run_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: scraper_run_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input scraper_run_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  keywords: String
  run_id: String
  status: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type scraper_run_sum_fields {
  id: Int
}

"""
update columns of table "scraper.run"
"""
enum scraper_run_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  keywords

  """column name"""
  run_id

  """column name"""
  status

  """column name"""
  updated_at
}

input scraper_run_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: scraper_run_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: scraper_run_set_input

  """filter the rows which have to be updated"""
  where: scraper_run_bool_exp!
}

"""aggregate var_pop on columns"""
type scraper_run_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type scraper_run_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type scraper_run_variance_fields {
  id: Float
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type subscription_root {
  """
  fetch data from the table: "nanisore.Image"
  """
  nanisore_Image(
    """distinct select on columns"""
    distinct_on: [nanisore_Image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Image_order_by!]

    """filter the rows returned"""
    where: nanisore_Image_bool_exp
  ): [nanisore_Image!]!

  """
  fetch aggregated fields from the table: "nanisore.Image"
  """
  nanisore_Image_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Image_order_by!]

    """filter the rows returned"""
    where: nanisore_Image_bool_exp
  ): nanisore_Image_aggregate!

  """fetch data from the table: "nanisore.Image" using primary key columns"""
  nanisore_Image_by_pk(id: Int!): nanisore_Image

  """
  fetch data from the table in a streaming manner: "nanisore.Image"
  """
  nanisore_Image_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [nanisore_Image_stream_cursor_input]!

    """filter the rows returned"""
    where: nanisore_Image_bool_exp
  ): [nanisore_Image!]!

  """
  fetch data from the table: "nanisore.Platform"
  """
  nanisore_Platform(
    """distinct select on columns"""
    distinct_on: [nanisore_Platform_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Platform_order_by!]

    """filter the rows returned"""
    where: nanisore_Platform_bool_exp
  ): [nanisore_Platform!]!

  """
  fetch aggregated fields from the table: "nanisore.Platform"
  """
  nanisore_Platform_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Platform_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Platform_order_by!]

    """filter the rows returned"""
    where: nanisore_Platform_bool_exp
  ): nanisore_Platform_aggregate!

  """
  fetch data from the table: "nanisore.Platform" using primary key columns
  """
  nanisore_Platform_by_pk(id: Int!): nanisore_Platform

  """
  fetch data from the table in a streaming manner: "nanisore.Platform"
  """
  nanisore_Platform_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [nanisore_Platform_stream_cursor_input]!

    """filter the rows returned"""
    where: nanisore_Platform_bool_exp
  ): [nanisore_Platform!]!

  """
  fetch data from the table: "nanisore.Product"
  """
  nanisore_Product(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_bool_exp
  ): [nanisore_Product!]!

  """
  fetch data from the table: "nanisore.Product_Specification"
  """
  nanisore_Product_Specification(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): [nanisore_Product_Specification!]!

  """
  fetch aggregated fields from the table: "nanisore.Product_Specification"
  """
  nanisore_Product_Specification_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): nanisore_Product_Specification_aggregate!

  """
  fetch data from the table: "nanisore.Product_Specification" using primary key columns
  """
  nanisore_Product_Specification_by_pk(id: Int!): nanisore_Product_Specification

  """
  fetch data from the table in a streaming manner: "nanisore.Product_Specification"
  """
  nanisore_Product_Specification_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [nanisore_Product_Specification_stream_cursor_input]!

    """filter the rows returned"""
    where: nanisore_Product_Specification_bool_exp
  ): [nanisore_Product_Specification!]!

  """
  fetch aggregated fields from the table: "nanisore.Product"
  """
  nanisore_Product_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Product_order_by!]

    """filter the rows returned"""
    where: nanisore_Product_bool_exp
  ): nanisore_Product_aggregate!

  """
  fetch data from the table: "nanisore.Product" using primary key columns
  """
  nanisore_Product_by_pk(id: Int!): nanisore_Product

  """
  fetch data from the table in a streaming manner: "nanisore.Product"
  """
  nanisore_Product_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [nanisore_Product_stream_cursor_input]!

    """filter the rows returned"""
    where: nanisore_Product_bool_exp
  ): [nanisore_Product!]!

  """
  fetch data from the table: "nanisore.Specification"
  """
  nanisore_Specification(
    """distinct select on columns"""
    distinct_on: [nanisore_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Specification_bool_exp
  ): [nanisore_Specification!]!

  """
  fetch aggregated fields from the table: "nanisore.Specification"
  """
  nanisore_Specification_aggregate(
    """distinct select on columns"""
    distinct_on: [nanisore_Specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nanisore_Specification_order_by!]

    """filter the rows returned"""
    where: nanisore_Specification_bool_exp
  ): nanisore_Specification_aggregate!

  """
  fetch data from the table: "nanisore.Specification" using primary key columns
  """
  nanisore_Specification_by_pk(id: Int!): nanisore_Specification

  """
  fetch data from the table in a streaming manner: "nanisore.Specification"
  """
  nanisore_Specification_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [nanisore_Specification_stream_cursor_input]!

    """filter the rows returned"""
    where: nanisore_Specification_bool_exp
  ): [nanisore_Specification!]!

  """
  fetch data from the table: "scraper.item"
  """
  scraper_item(
    """distinct select on columns"""
    distinct_on: [scraper_item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_item_order_by!]

    """filter the rows returned"""
    where: scraper_item_bool_exp
  ): [scraper_item!]!

  """
  fetch aggregated fields from the table: "scraper.item"
  """
  scraper_item_aggregate(
    """distinct select on columns"""
    distinct_on: [scraper_item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_item_order_by!]

    """filter the rows returned"""
    where: scraper_item_bool_exp
  ): scraper_item_aggregate!

  """fetch data from the table: "scraper.item" using primary key columns"""
  scraper_item_by_pk(id: Int!): scraper_item

  """
  fetch data from the table in a streaming manner: "scraper.item"
  """
  scraper_item_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [scraper_item_stream_cursor_input]!

    """filter the rows returned"""
    where: scraper_item_bool_exp
  ): [scraper_item!]!

  """
  fetch data from the table: "scraper.run"
  """
  scraper_run(
    """distinct select on columns"""
    distinct_on: [scraper_run_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_run_order_by!]

    """filter the rows returned"""
    where: scraper_run_bool_exp
  ): [scraper_run!]!

  """
  fetch aggregated fields from the table: "scraper.run"
  """
  scraper_run_aggregate(
    """distinct select on columns"""
    distinct_on: [scraper_run_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scraper_run_order_by!]

    """filter the rows returned"""
    where: scraper_run_bool_exp
  ): scraper_run_aggregate!

  """fetch data from the table: "scraper.run" using primary key columns"""
  scraper_run_by_pk(id: Int!): scraper_run

  """
  fetch data from the table in a streaming manner: "scraper.run"
  """
  scraper_run_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [scraper_run_stream_cursor_input]!

    """filter the rows returned"""
    where: scraper_run_bool_exp
  ): [scraper_run!]!

  """
  fetch data from the table: "tigertech.image"
  """
  tigertech_image(
    """distinct select on columns"""
    distinct_on: [tigertech_image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_image_order_by!]

    """filter the rows returned"""
    where: tigertech_image_bool_exp
  ): [tigertech_image!]!

  """
  fetch aggregated fields from the table: "tigertech.image"
  """
  tigertech_image_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_image_order_by!]

    """filter the rows returned"""
    where: tigertech_image_bool_exp
  ): tigertech_image_aggregate!

  """fetch data from the table: "tigertech.image" using primary key columns"""
  tigertech_image_by_pk(id: bigint!): tigertech_image

  """
  fetch data from the table in a streaming manner: "tigertech.image"
  """
  tigertech_image_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tigertech_image_stream_cursor_input]!

    """filter the rows returned"""
    where: tigertech_image_bool_exp
  ): [tigertech_image!]!

  """
  fetch data from the table: "tigertech.product"
  """
  tigertech_product(
    """distinct select on columns"""
    distinct_on: [tigertech_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_order_by!]

    """filter the rows returned"""
    where: tigertech_product_bool_exp
  ): [tigertech_product!]!

  """
  fetch aggregated fields from the table: "tigertech.product"
  """
  tigertech_product_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_order_by!]

    """filter the rows returned"""
    where: tigertech_product_bool_exp
  ): tigertech_product_aggregate!

  """
  fetch data from the table: "tigertech.product" using primary key columns
  """
  tigertech_product_by_pk(id: bigint!): tigertech_product

  """
  fetch data from the table: "tigertech.product_sku"
  """
  tigertech_product_sku(
    """distinct select on columns"""
    distinct_on: [tigertech_product_sku_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_sku_order_by!]

    """filter the rows returned"""
    where: tigertech_product_sku_bool_exp
  ): [tigertech_product_sku!]!

  """
  fetch aggregated fields from the table: "tigertech.product_sku"
  """
  tigertech_product_sku_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_product_sku_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_sku_order_by!]

    """filter the rows returned"""
    where: tigertech_product_sku_bool_exp
  ): tigertech_product_sku_aggregate!

  """
  fetch data from the table: "tigertech.product_sku" using primary key columns
  """
  tigertech_product_sku_by_pk(id: bigint!): tigertech_product_sku

  """
  fetch data from the table in a streaming manner: "tigertech.product_sku"
  """
  tigertech_product_sku_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tigertech_product_sku_stream_cursor_input]!

    """filter the rows returned"""
    where: tigertech_product_sku_bool_exp
  ): [tigertech_product_sku!]!

  """
  fetch data from the table in a streaming manner: "tigertech.product"
  """
  tigertech_product_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tigertech_product_stream_cursor_input]!

    """filter the rows returned"""
    where: tigertech_product_bool_exp
  ): [tigertech_product!]!

  """
  fetch data from the table: "tigertech.specification"
  """
  tigertech_specification(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): [tigertech_specification!]!

  """
  fetch aggregated fields from the table: "tigertech.specification"
  """
  tigertech_specification_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): tigertech_specification_aggregate!

  """
  fetch data from the table: "tigertech.specification" using primary key columns
  """
  tigertech_specification_by_pk(id: bigint!): tigertech_specification

  """
  fetch data from the table in a streaming manner: "tigertech.specification"
  """
  tigertech_specification_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tigertech_specification_stream_cursor_input]!

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): [tigertech_specification!]!
}

"""
columns and relationships of "tigertech.image"
"""
type tigertech_image {
  created_at: timestamptz!
  from: String!
  id: bigint!
  image_type: bpchar!
  operator: Int!
  order: smallint!
  product_id: bigint!
  referer: String!
  updated_at: timestamptz!
  url: String!
}

"""
aggregated selection of "tigertech.image"
"""
type tigertech_image_aggregate {
  aggregate: tigertech_image_aggregate_fields
  nodes: [tigertech_image!]!
}

input tigertech_image_aggregate_bool_exp {
  count: tigertech_image_aggregate_bool_exp_count
}

input tigertech_image_aggregate_bool_exp_count {
  arguments: [tigertech_image_select_column!]
  distinct: Boolean
  filter: tigertech_image_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tigertech.image"
"""
type tigertech_image_aggregate_fields {
  avg: tigertech_image_avg_fields
  count(columns: [tigertech_image_select_column!], distinct: Boolean): Int!
  max: tigertech_image_max_fields
  min: tigertech_image_min_fields
  stddev: tigertech_image_stddev_fields
  stddev_pop: tigertech_image_stddev_pop_fields
  stddev_samp: tigertech_image_stddev_samp_fields
  sum: tigertech_image_sum_fields
  var_pop: tigertech_image_var_pop_fields
  var_samp: tigertech_image_var_samp_fields
  variance: tigertech_image_variance_fields
}

"""
order by aggregate values of table "tigertech.image"
"""
input tigertech_image_aggregate_order_by {
  avg: tigertech_image_avg_order_by
  count: order_by
  max: tigertech_image_max_order_by
  min: tigertech_image_min_order_by
  stddev: tigertech_image_stddev_order_by
  stddev_pop: tigertech_image_stddev_pop_order_by
  stddev_samp: tigertech_image_stddev_samp_order_by
  sum: tigertech_image_sum_order_by
  var_pop: tigertech_image_var_pop_order_by
  var_samp: tigertech_image_var_samp_order_by
  variance: tigertech_image_variance_order_by
}

"""
input type for inserting array relation for remote table "tigertech.image"
"""
input tigertech_image_arr_rel_insert_input {
  data: [tigertech_image_insert_input!]!

  """upsert condition"""
  on_conflict: tigertech_image_on_conflict
}

"""aggregate avg on columns"""
type tigertech_image_avg_fields {
  id: Float
  operator: Float
  order: Float
  product_id: Float
}

"""
order by avg() on columns of table "tigertech.image"
"""
input tigertech_image_avg_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""
Boolean expression to filter rows from the table "tigertech.image". All fields are combined with a logical 'AND'.
"""
input tigertech_image_bool_exp {
  _and: [tigertech_image_bool_exp!]
  _not: tigertech_image_bool_exp
  _or: [tigertech_image_bool_exp!]
  created_at: timestamptz_comparison_exp
  from: String_comparison_exp
  id: bigint_comparison_exp
  image_type: bpchar_comparison_exp
  operator: Int_comparison_exp
  order: smallint_comparison_exp
  product_id: bigint_comparison_exp
  referer: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "tigertech.image"
"""
enum tigertech_image_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  image_pkey
}

"""
input type for incrementing numeric columns in table "tigertech.image"
"""
input tigertech_image_inc_input {
  id: bigint
  operator: Int
  order: smallint
  product_id: bigint
}

"""
input type for inserting data into table "tigertech.image"
"""
input tigertech_image_insert_input {
  created_at: timestamptz
  from: String
  id: bigint
  image_type: bpchar
  operator: Int
  order: smallint
  product_id: bigint
  referer: String
  updated_at: timestamptz
  url: String
}

"""aggregate max on columns"""
type tigertech_image_max_fields {
  created_at: timestamptz
  from: String
  id: bigint
  image_type: bpchar
  operator: Int
  order: smallint
  product_id: bigint
  referer: String
  updated_at: timestamptz
  url: String
}

"""
order by max() on columns of table "tigertech.image"
"""
input tigertech_image_max_order_by {
  created_at: order_by
  from: order_by
  id: order_by
  image_type: order_by
  operator: order_by
  order: order_by
  product_id: order_by
  referer: order_by
  updated_at: order_by
  url: order_by
}

"""aggregate min on columns"""
type tigertech_image_min_fields {
  created_at: timestamptz
  from: String
  id: bigint
  image_type: bpchar
  operator: Int
  order: smallint
  product_id: bigint
  referer: String
  updated_at: timestamptz
  url: String
}

"""
order by min() on columns of table "tigertech.image"
"""
input tigertech_image_min_order_by {
  created_at: order_by
  from: order_by
  id: order_by
  image_type: order_by
  operator: order_by
  order: order_by
  product_id: order_by
  referer: order_by
  updated_at: order_by
  url: order_by
}

"""
response of any mutation on the table "tigertech.image"
"""
type tigertech_image_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tigertech_image!]!
}

"""
on_conflict condition type for table "tigertech.image"
"""
input tigertech_image_on_conflict {
  constraint: tigertech_image_constraint!
  update_columns: [tigertech_image_update_column!]! = []
  where: tigertech_image_bool_exp
}

"""Ordering options when selecting data from "tigertech.image"."""
input tigertech_image_order_by {
  created_at: order_by
  from: order_by
  id: order_by
  image_type: order_by
  operator: order_by
  order: order_by
  product_id: order_by
  referer: order_by
  updated_at: order_by
  url: order_by
}

"""primary key columns input for table: tigertech.image"""
input tigertech_image_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tigertech.image"
"""
enum tigertech_image_select_column {
  """column name"""
  created_at

  """column name"""
  from

  """column name"""
  id

  """column name"""
  image_type

  """column name"""
  operator

  """column name"""
  order

  """column name"""
  product_id

  """column name"""
  referer

  """column name"""
  updated_at

  """column name"""
  url
}

"""
input type for updating data in table "tigertech.image"
"""
input tigertech_image_set_input {
  created_at: timestamptz
  from: String
  id: bigint
  image_type: bpchar
  operator: Int
  order: smallint
  product_id: bigint
  referer: String
  updated_at: timestamptz
  url: String
}

"""aggregate stddev on columns"""
type tigertech_image_stddev_fields {
  id: Float
  operator: Float
  order: Float
  product_id: Float
}

"""
order by stddev() on columns of table "tigertech.image"
"""
input tigertech_image_stddev_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""aggregate stddev_pop on columns"""
type tigertech_image_stddev_pop_fields {
  id: Float
  operator: Float
  order: Float
  product_id: Float
}

"""
order by stddev_pop() on columns of table "tigertech.image"
"""
input tigertech_image_stddev_pop_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""aggregate stddev_samp on columns"""
type tigertech_image_stddev_samp_fields {
  id: Float
  operator: Float
  order: Float
  product_id: Float
}

"""
order by stddev_samp() on columns of table "tigertech.image"
"""
input tigertech_image_stddev_samp_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""
Streaming cursor of the table "tigertech_image"
"""
input tigertech_image_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tigertech_image_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tigertech_image_stream_cursor_value_input {
  created_at: timestamptz
  from: String
  id: bigint
  image_type: bpchar
  operator: Int
  order: smallint
  product_id: bigint
  referer: String
  updated_at: timestamptz
  url: String
}

"""aggregate sum on columns"""
type tigertech_image_sum_fields {
  id: bigint
  operator: Int
  order: smallint
  product_id: bigint
}

"""
order by sum() on columns of table "tigertech.image"
"""
input tigertech_image_sum_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""
update columns of table "tigertech.image"
"""
enum tigertech_image_update_column {
  """column name"""
  created_at

  """column name"""
  from

  """column name"""
  id

  """column name"""
  image_type

  """column name"""
  operator

  """column name"""
  order

  """column name"""
  product_id

  """column name"""
  referer

  """column name"""
  updated_at

  """column name"""
  url
}

input tigertech_image_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tigertech_image_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tigertech_image_set_input

  """filter the rows which have to be updated"""
  where: tigertech_image_bool_exp!
}

"""aggregate var_pop on columns"""
type tigertech_image_var_pop_fields {
  id: Float
  operator: Float
  order: Float
  product_id: Float
}

"""
order by var_pop() on columns of table "tigertech.image"
"""
input tigertech_image_var_pop_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""aggregate var_samp on columns"""
type tigertech_image_var_samp_fields {
  id: Float
  operator: Float
  order: Float
  product_id: Float
}

"""
order by var_samp() on columns of table "tigertech.image"
"""
input tigertech_image_var_samp_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""aggregate variance on columns"""
type tigertech_image_variance_fields {
  id: Float
  operator: Float
  order: Float
  product_id: Float
}

"""
order by variance() on columns of table "tigertech.image"
"""
input tigertech_image_variance_order_by {
  id: order_by
  operator: order_by
  order: order_by
  product_id: order_by
}

"""
columns and relationships of "tigertech.product"
"""
type tigertech_product {
  cover_image: String!
  created_at: timestamptz!
  description: String!
  id: bigint!

  """An array relationship"""
  images(
    """distinct select on columns"""
    distinct_on: [tigertech_image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_image_order_by!]

    """filter the rows returned"""
    where: tigertech_image_bool_exp
  ): [tigertech_image!]!

  """An aggregate relationship"""
  images_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_image_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_image_order_by!]

    """filter the rows returned"""
    where: tigertech_image_bool_exp
  ): tigertech_image_aggregate!
  name: String!
  operator: Int!
  original_id: String!
  platform_id: Int!
  price: money!

  """An array relationship"""
  sku(
    """distinct select on columns"""
    distinct_on: [tigertech_product_sku_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_sku_order_by!]

    """filter the rows returned"""
    where: tigertech_product_sku_bool_exp
  ): [tigertech_product_sku!]!

  """An aggregate relationship"""
  sku_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_product_sku_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_product_sku_order_by!]

    """filter the rows returned"""
    where: tigertech_product_sku_bool_exp
  ): tigertech_product_sku_aggregate!

  """An array relationship"""
  specifications(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): [tigertech_specification!]!

  """An aggregate relationship"""
  specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): tigertech_specification_aggregate!
  updated_at: timestamptz!
  url: String!
  visable: Boolean!
}

"""
aggregated selection of "tigertech.product"
"""
type tigertech_product_aggregate {
  aggregate: tigertech_product_aggregate_fields
  nodes: [tigertech_product!]!
}

"""
aggregate fields of "tigertech.product"
"""
type tigertech_product_aggregate_fields {
  avg: tigertech_product_avg_fields
  count(columns: [tigertech_product_select_column!], distinct: Boolean): Int!
  max: tigertech_product_max_fields
  min: tigertech_product_min_fields
  stddev: tigertech_product_stddev_fields
  stddev_pop: tigertech_product_stddev_pop_fields
  stddev_samp: tigertech_product_stddev_samp_fields
  sum: tigertech_product_sum_fields
  var_pop: tigertech_product_var_pop_fields
  var_samp: tigertech_product_var_samp_fields
  variance: tigertech_product_variance_fields
}

"""aggregate avg on columns"""
type tigertech_product_avg_fields {
  id: Float
  operator: Float
  platform_id: Float
  price: Float
}

"""
Boolean expression to filter rows from the table "tigertech.product". All fields are combined with a logical 'AND'.
"""
input tigertech_product_bool_exp {
  _and: [tigertech_product_bool_exp!]
  _not: tigertech_product_bool_exp
  _or: [tigertech_product_bool_exp!]
  cover_image: String_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: bigint_comparison_exp
  images: tigertech_image_bool_exp
  images_aggregate: tigertech_image_aggregate_bool_exp
  name: String_comparison_exp
  operator: Int_comparison_exp
  original_id: String_comparison_exp
  platform_id: Int_comparison_exp
  price: money_comparison_exp
  sku: tigertech_product_sku_bool_exp
  sku_aggregate: tigertech_product_sku_aggregate_bool_exp
  specifications: tigertech_specification_bool_exp
  specifications_aggregate: tigertech_specification_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
  url: String_comparison_exp
  visable: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "tigertech.product"
"""
enum tigertech_product_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  product_pkey
}

"""
input type for incrementing numeric columns in table "tigertech.product"
"""
input tigertech_product_inc_input {
  id: bigint
  operator: Int
  platform_id: Int
  price: money
}

"""
input type for inserting data into table "tigertech.product"
"""
input tigertech_product_insert_input {
  cover_image: String
  created_at: timestamptz
  description: String
  id: bigint
  images: tigertech_image_arr_rel_insert_input
  name: String
  operator: Int
  original_id: String
  platform_id: Int
  price: money
  sku: tigertech_product_sku_arr_rel_insert_input
  specifications: tigertech_specification_arr_rel_insert_input
  updated_at: timestamptz
  url: String
  visable: Boolean
}

"""aggregate max on columns"""
type tigertech_product_max_fields {
  cover_image: String
  created_at: timestamptz
  description: String
  id: bigint
  name: String
  operator: Int
  original_id: String
  platform_id: Int
  price: money
  updated_at: timestamptz
  url: String
}

"""aggregate min on columns"""
type tigertech_product_min_fields {
  cover_image: String
  created_at: timestamptz
  description: String
  id: bigint
  name: String
  operator: Int
  original_id: String
  platform_id: Int
  price: money
  updated_at: timestamptz
  url: String
}

"""
response of any mutation on the table "tigertech.product"
"""
type tigertech_product_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tigertech_product!]!
}

"""
input type for inserting object relation for remote table "tigertech.product"
"""
input tigertech_product_obj_rel_insert_input {
  data: tigertech_product_insert_input!

  """upsert condition"""
  on_conflict: tigertech_product_on_conflict
}

"""
on_conflict condition type for table "tigertech.product"
"""
input tigertech_product_on_conflict {
  constraint: tigertech_product_constraint!
  update_columns: [tigertech_product_update_column!]! = []
  where: tigertech_product_bool_exp
}

"""Ordering options when selecting data from "tigertech.product"."""
input tigertech_product_order_by {
  cover_image: order_by
  created_at: order_by
  description: order_by
  id: order_by
  images_aggregate: tigertech_image_aggregate_order_by
  name: order_by
  operator: order_by
  original_id: order_by
  platform_id: order_by
  price: order_by
  sku_aggregate: tigertech_product_sku_aggregate_order_by
  specifications_aggregate: tigertech_specification_aggregate_order_by
  updated_at: order_by
  url: order_by
  visable: order_by
}

"""primary key columns input for table: tigertech.product"""
input tigertech_product_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tigertech.product"
"""
enum tigertech_product_select_column {
  """column name"""
  cover_image

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  operator

  """column name"""
  original_id

  """column name"""
  platform_id

  """column name"""
  price

  """column name"""
  updated_at

  """column name"""
  url

  """column name"""
  visable
}

"""
input type for updating data in table "tigertech.product"
"""
input tigertech_product_set_input {
  cover_image: String
  created_at: timestamptz
  description: String
  id: bigint
  name: String
  operator: Int
  original_id: String
  platform_id: Int
  price: money
  updated_at: timestamptz
  url: String
  visable: Boolean
}

"""
columns and relationships of "tigertech.product_sku"
"""
type tigertech_product_sku {
  created_at: timestamptz!
  id: bigint!
  operator: Int!

  """An object relationship"""
  product: tigertech_product
  product_id: bigint!

  """An array relationship"""
  products_specifications(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): [tigertech_specification!]!

  """An aggregate relationship"""
  products_specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [tigertech_specification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tigertech_specification_order_by!]

    """filter the rows returned"""
    where: tigertech_specification_bool_exp
  ): tigertech_specification_aggregate!
  sku: String!
  specs: [Int!]!
  stock: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "tigertech.product_sku"
"""
type tigertech_product_sku_aggregate {
  aggregate: tigertech_product_sku_aggregate_fields
  nodes: [tigertech_product_sku!]!
}

input tigertech_product_sku_aggregate_bool_exp {
  count: tigertech_product_sku_aggregate_bool_exp_count
}

input tigertech_product_sku_aggregate_bool_exp_count {
  arguments: [tigertech_product_sku_select_column!]
  distinct: Boolean
  filter: tigertech_product_sku_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tigertech.product_sku"
"""
type tigertech_product_sku_aggregate_fields {
  avg: tigertech_product_sku_avg_fields
  count(columns: [tigertech_product_sku_select_column!], distinct: Boolean): Int!
  max: tigertech_product_sku_max_fields
  min: tigertech_product_sku_min_fields
  stddev: tigertech_product_sku_stddev_fields
  stddev_pop: tigertech_product_sku_stddev_pop_fields
  stddev_samp: tigertech_product_sku_stddev_samp_fields
  sum: tigertech_product_sku_sum_fields
  var_pop: tigertech_product_sku_var_pop_fields
  var_samp: tigertech_product_sku_var_samp_fields
  variance: tigertech_product_sku_variance_fields
}

"""
order by aggregate values of table "tigertech.product_sku"
"""
input tigertech_product_sku_aggregate_order_by {
  avg: tigertech_product_sku_avg_order_by
  count: order_by
  max: tigertech_product_sku_max_order_by
  min: tigertech_product_sku_min_order_by
  stddev: tigertech_product_sku_stddev_order_by
  stddev_pop: tigertech_product_sku_stddev_pop_order_by
  stddev_samp: tigertech_product_sku_stddev_samp_order_by
  sum: tigertech_product_sku_sum_order_by
  var_pop: tigertech_product_sku_var_pop_order_by
  var_samp: tigertech_product_sku_var_samp_order_by
  variance: tigertech_product_sku_variance_order_by
}

"""
input type for inserting array relation for remote table "tigertech.product_sku"
"""
input tigertech_product_sku_arr_rel_insert_input {
  data: [tigertech_product_sku_insert_input!]!

  """upsert condition"""
  on_conflict: tigertech_product_sku_on_conflict
}

"""aggregate avg on columns"""
type tigertech_product_sku_avg_fields {
  id: Float
  operator: Float
  product_id: Float
  stock: Float
}

"""
order by avg() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_avg_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""
Boolean expression to filter rows from the table "tigertech.product_sku". All fields are combined with a logical 'AND'.
"""
input tigertech_product_sku_bool_exp {
  _and: [tigertech_product_sku_bool_exp!]
  _not: tigertech_product_sku_bool_exp
  _or: [tigertech_product_sku_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  operator: Int_comparison_exp
  product: tigertech_product_bool_exp
  product_id: bigint_comparison_exp
  products_specifications: tigertech_specification_bool_exp
  products_specifications_aggregate: tigertech_specification_aggregate_bool_exp
  sku: String_comparison_exp
  specs: Int_array_comparison_exp
  stock: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "tigertech.product_sku"
"""
enum tigertech_product_sku_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  product_sku_pkey
}

"""
input type for incrementing numeric columns in table "tigertech.product_sku"
"""
input tigertech_product_sku_inc_input {
  id: bigint
  operator: Int
  product_id: bigint
  stock: Int
}

"""
input type for inserting data into table "tigertech.product_sku"
"""
input tigertech_product_sku_insert_input {
  created_at: timestamptz
  id: bigint
  operator: Int
  product: tigertech_product_obj_rel_insert_input
  product_id: bigint
  products_specifications: tigertech_specification_arr_rel_insert_input
  sku: String
  specs: [Int!]
  stock: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type tigertech_product_sku_max_fields {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  sku: String
  specs: [Int!]
  stock: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_max_order_by {
  created_at: order_by
  id: order_by
  operator: order_by
  product_id: order_by
  sku: order_by
  specs: order_by
  stock: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type tigertech_product_sku_min_fields {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  sku: String
  specs: [Int!]
  stock: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_min_order_by {
  created_at: order_by
  id: order_by
  operator: order_by
  product_id: order_by
  sku: order_by
  specs: order_by
  stock: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "tigertech.product_sku"
"""
type tigertech_product_sku_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tigertech_product_sku!]!
}

"""
on_conflict condition type for table "tigertech.product_sku"
"""
input tigertech_product_sku_on_conflict {
  constraint: tigertech_product_sku_constraint!
  update_columns: [tigertech_product_sku_update_column!]! = []
  where: tigertech_product_sku_bool_exp
}

"""Ordering options when selecting data from "tigertech.product_sku"."""
input tigertech_product_sku_order_by {
  created_at: order_by
  id: order_by
  operator: order_by
  product: tigertech_product_order_by
  product_id: order_by
  products_specifications_aggregate: tigertech_specification_aggregate_order_by
  sku: order_by
  specs: order_by
  stock: order_by
  updated_at: order_by
}

"""primary key columns input for table: tigertech.product_sku"""
input tigertech_product_sku_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tigertech.product_sku"
"""
enum tigertech_product_sku_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  operator

  """column name"""
  product_id

  """column name"""
  sku

  """column name"""
  specs

  """column name"""
  stock

  """column name"""
  updated_at
}

"""
input type for updating data in table "tigertech.product_sku"
"""
input tigertech_product_sku_set_input {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  sku: String
  specs: [Int!]
  stock: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type tigertech_product_sku_stddev_fields {
  id: Float
  operator: Float
  product_id: Float
  stock: Float
}

"""
order by stddev() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_stddev_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""aggregate stddev_pop on columns"""
type tigertech_product_sku_stddev_pop_fields {
  id: Float
  operator: Float
  product_id: Float
  stock: Float
}

"""
order by stddev_pop() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_stddev_pop_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""aggregate stddev_samp on columns"""
type tigertech_product_sku_stddev_samp_fields {
  id: Float
  operator: Float
  product_id: Float
  stock: Float
}

"""
order by stddev_samp() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_stddev_samp_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""
Streaming cursor of the table "tigertech_product_sku"
"""
input tigertech_product_sku_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tigertech_product_sku_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tigertech_product_sku_stream_cursor_value_input {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  sku: String
  specs: [Int!]
  stock: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type tigertech_product_sku_sum_fields {
  id: bigint
  operator: Int
  product_id: bigint
  stock: Int
}

"""
order by sum() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_sum_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""
update columns of table "tigertech.product_sku"
"""
enum tigertech_product_sku_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  operator

  """column name"""
  product_id

  """column name"""
  sku

  """column name"""
  specs

  """column name"""
  stock

  """column name"""
  updated_at
}

input tigertech_product_sku_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tigertech_product_sku_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tigertech_product_sku_set_input

  """filter the rows which have to be updated"""
  where: tigertech_product_sku_bool_exp!
}

"""aggregate var_pop on columns"""
type tigertech_product_sku_var_pop_fields {
  id: Float
  operator: Float
  product_id: Float
  stock: Float
}

"""
order by var_pop() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_var_pop_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""aggregate var_samp on columns"""
type tigertech_product_sku_var_samp_fields {
  id: Float
  operator: Float
  product_id: Float
  stock: Float
}

"""
order by var_samp() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_var_samp_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""aggregate variance on columns"""
type tigertech_product_sku_variance_fields {
  id: Float
  operator: Float
  product_id: Float
  stock: Float
}

"""
order by variance() on columns of table "tigertech.product_sku"
"""
input tigertech_product_sku_variance_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
  stock: order_by
}

"""aggregate stddev on columns"""
type tigertech_product_stddev_fields {
  id: Float
  operator: Float
  platform_id: Float
  price: Float
}

"""aggregate stddev_pop on columns"""
type tigertech_product_stddev_pop_fields {
  id: Float
  operator: Float
  platform_id: Float
  price: Float
}

"""aggregate stddev_samp on columns"""
type tigertech_product_stddev_samp_fields {
  id: Float
  operator: Float
  platform_id: Float
  price: Float
}

"""
Streaming cursor of the table "tigertech_product"
"""
input tigertech_product_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tigertech_product_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tigertech_product_stream_cursor_value_input {
  cover_image: String
  created_at: timestamptz
  description: String
  id: bigint
  name: String
  operator: Int
  original_id: String
  platform_id: Int
  price: money
  updated_at: timestamptz
  url: String
  visable: Boolean
}

"""aggregate sum on columns"""
type tigertech_product_sum_fields {
  id: bigint
  operator: Int
  platform_id: Int
  price: money
}

"""
update columns of table "tigertech.product"
"""
enum tigertech_product_update_column {
  """column name"""
  cover_image

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  operator

  """column name"""
  original_id

  """column name"""
  platform_id

  """column name"""
  price

  """column name"""
  updated_at

  """column name"""
  url

  """column name"""
  visable
}

input tigertech_product_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tigertech_product_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tigertech_product_set_input

  """filter the rows which have to be updated"""
  where: tigertech_product_bool_exp!
}

"""aggregate var_pop on columns"""
type tigertech_product_var_pop_fields {
  id: Float
  operator: Float
  platform_id: Float
  price: Float
}

"""aggregate var_samp on columns"""
type tigertech_product_var_samp_fields {
  id: Float
  operator: Float
  platform_id: Float
  price: Float
}

"""aggregate variance on columns"""
type tigertech_product_variance_fields {
  id: Float
  operator: Float
  platform_id: Float
  price: Float
}

"""
columns and relationships of "tigertech.specification"
"""
type tigertech_specification {
  created_at: timestamptz!
  id: bigint!
  operator: Int!

  """An object relationship"""
  product: tigertech_product
  product_id: bigint!
  type: String!
  updated_at: timestamptz!
  value: String!
}

"""
aggregated selection of "tigertech.specification"
"""
type tigertech_specification_aggregate {
  aggregate: tigertech_specification_aggregate_fields
  nodes: [tigertech_specification!]!
}

input tigertech_specification_aggregate_bool_exp {
  count: tigertech_specification_aggregate_bool_exp_count
}

input tigertech_specification_aggregate_bool_exp_count {
  arguments: [tigertech_specification_select_column!]
  distinct: Boolean
  filter: tigertech_specification_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tigertech.specification"
"""
type tigertech_specification_aggregate_fields {
  avg: tigertech_specification_avg_fields
  count(columns: [tigertech_specification_select_column!], distinct: Boolean): Int!
  max: tigertech_specification_max_fields
  min: tigertech_specification_min_fields
  stddev: tigertech_specification_stddev_fields
  stddev_pop: tigertech_specification_stddev_pop_fields
  stddev_samp: tigertech_specification_stddev_samp_fields
  sum: tigertech_specification_sum_fields
  var_pop: tigertech_specification_var_pop_fields
  var_samp: tigertech_specification_var_samp_fields
  variance: tigertech_specification_variance_fields
}

"""
order by aggregate values of table "tigertech.specification"
"""
input tigertech_specification_aggregate_order_by {
  avg: tigertech_specification_avg_order_by
  count: order_by
  max: tigertech_specification_max_order_by
  min: tigertech_specification_min_order_by
  stddev: tigertech_specification_stddev_order_by
  stddev_pop: tigertech_specification_stddev_pop_order_by
  stddev_samp: tigertech_specification_stddev_samp_order_by
  sum: tigertech_specification_sum_order_by
  var_pop: tigertech_specification_var_pop_order_by
  var_samp: tigertech_specification_var_samp_order_by
  variance: tigertech_specification_variance_order_by
}

"""
input type for inserting array relation for remote table "tigertech.specification"
"""
input tigertech_specification_arr_rel_insert_input {
  data: [tigertech_specification_insert_input!]!

  """upsert condition"""
  on_conflict: tigertech_specification_on_conflict
}

"""aggregate avg on columns"""
type tigertech_specification_avg_fields {
  id: Float
  operator: Float
  product_id: Float
}

"""
order by avg() on columns of table "tigertech.specification"
"""
input tigertech_specification_avg_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

"""
Boolean expression to filter rows from the table "tigertech.specification". All fields are combined with a logical 'AND'.
"""
input tigertech_specification_bool_exp {
  _and: [tigertech_specification_bool_exp!]
  _not: tigertech_specification_bool_exp
  _or: [tigertech_specification_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  operator: Int_comparison_exp
  product: tigertech_product_bool_exp
  product_id: bigint_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "tigertech.specification"
"""
enum tigertech_specification_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  specification_pkey
}

"""
input type for incrementing numeric columns in table "tigertech.specification"
"""
input tigertech_specification_inc_input {
  id: bigint
  operator: Int
  product_id: bigint
}

"""
input type for inserting data into table "tigertech.specification"
"""
input tigertech_specification_insert_input {
  created_at: timestamptz
  id: bigint
  operator: Int
  product: tigertech_product_obj_rel_insert_input
  product_id: bigint
  type: String
  updated_at: timestamptz
  value: String
}

"""aggregate max on columns"""
type tigertech_specification_max_fields {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  type: String
  updated_at: timestamptz
  value: String
}

"""
order by max() on columns of table "tigertech.specification"
"""
input tigertech_specification_max_order_by {
  created_at: order_by
  id: order_by
  operator: order_by
  product_id: order_by
  type: order_by
  updated_at: order_by
  value: order_by
}

"""aggregate min on columns"""
type tigertech_specification_min_fields {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  type: String
  updated_at: timestamptz
  value: String
}

"""
order by min() on columns of table "tigertech.specification"
"""
input tigertech_specification_min_order_by {
  created_at: order_by
  id: order_by
  operator: order_by
  product_id: order_by
  type: order_by
  updated_at: order_by
  value: order_by
}

"""
response of any mutation on the table "tigertech.specification"
"""
type tigertech_specification_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tigertech_specification!]!
}

"""
on_conflict condition type for table "tigertech.specification"
"""
input tigertech_specification_on_conflict {
  constraint: tigertech_specification_constraint!
  update_columns: [tigertech_specification_update_column!]! = []
  where: tigertech_specification_bool_exp
}

"""Ordering options when selecting data from "tigertech.specification"."""
input tigertech_specification_order_by {
  created_at: order_by
  id: order_by
  operator: order_by
  product: tigertech_product_order_by
  product_id: order_by
  type: order_by
  updated_at: order_by
  value: order_by
}

"""primary key columns input for table: tigertech.specification"""
input tigertech_specification_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tigertech.specification"
"""
enum tigertech_specification_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  operator

  """column name"""
  product_id

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  value
}

"""
input type for updating data in table "tigertech.specification"
"""
input tigertech_specification_set_input {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  type: String
  updated_at: timestamptz
  value: String
}

"""aggregate stddev on columns"""
type tigertech_specification_stddev_fields {
  id: Float
  operator: Float
  product_id: Float
}

"""
order by stddev() on columns of table "tigertech.specification"
"""
input tigertech_specification_stddev_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

"""aggregate stddev_pop on columns"""
type tigertech_specification_stddev_pop_fields {
  id: Float
  operator: Float
  product_id: Float
}

"""
order by stddev_pop() on columns of table "tigertech.specification"
"""
input tigertech_specification_stddev_pop_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

"""aggregate stddev_samp on columns"""
type tigertech_specification_stddev_samp_fields {
  id: Float
  operator: Float
  product_id: Float
}

"""
order by stddev_samp() on columns of table "tigertech.specification"
"""
input tigertech_specification_stddev_samp_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

"""
Streaming cursor of the table "tigertech_specification"
"""
input tigertech_specification_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tigertech_specification_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tigertech_specification_stream_cursor_value_input {
  created_at: timestamptz
  id: bigint
  operator: Int
  product_id: bigint
  type: String
  updated_at: timestamptz
  value: String
}

"""aggregate sum on columns"""
type tigertech_specification_sum_fields {
  id: bigint
  operator: Int
  product_id: bigint
}

"""
order by sum() on columns of table "tigertech.specification"
"""
input tigertech_specification_sum_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

"""
update columns of table "tigertech.specification"
"""
enum tigertech_specification_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  operator

  """column name"""
  product_id

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  value
}

input tigertech_specification_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tigertech_specification_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tigertech_specification_set_input

  """filter the rows which have to be updated"""
  where: tigertech_specification_bool_exp!
}

"""aggregate var_pop on columns"""
type tigertech_specification_var_pop_fields {
  id: Float
  operator: Float
  product_id: Float
}

"""
order by var_pop() on columns of table "tigertech.specification"
"""
input tigertech_specification_var_pop_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

"""aggregate var_samp on columns"""
type tigertech_specification_var_samp_fields {
  id: Float
  operator: Float
  product_id: Float
}

"""
order by var_samp() on columns of table "tigertech.specification"
"""
input tigertech_specification_var_samp_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

"""aggregate variance on columns"""
type tigertech_specification_variance_fields {
  id: Float
  operator: Float
  product_id: Float
}

"""
order by variance() on columns of table "tigertech.specification"
"""
input tigertech_specification_variance_order_by {
  id: order_by
  operator: order_by
  product_id: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}